/**
 * HCL Domino REST API basis
 * REST APIs for Domino and more done right. With declarative security and access to Code, Design and Data
 *
 * The version of the OpenAPI document: 1.0.10
 * Contact: HeyHCL@pnp-hcl.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openntf.xsp.nosql.communication.driver.keep.client.model;

import jakarta.json.bind.annotation.JsonbProperty;

/**
  * Describes a column within a view or folder definition
 **/

public class ListDesignColumn  {
  
  @JsonbProperty("name")
  private String name;

  @JsonbProperty("title")
  private String title;

  @JsonbProperty("position")
  private Integer position;

  @JsonbProperty("sorted")
  private Boolean sorted;

  @JsonbProperty("directory")
  private String directory;

  @JsonbProperty("categorized")
  private Boolean categorized;

  @JsonbProperty("resort-asc")
  private Boolean resortAsc;

  @JsonbProperty("resort-desc")
  private Boolean resortDesc;

 /**
   * Get name
   * @return name
  **/
  public String getName() {
    return name;
  }

  /**
    * Set name
  **/
  public void setName(String name) {
    this.name = name;
  }

  public ListDesignColumn name(String name) {
    this.name = name;
    return this;
  }

 /**
   * Get title
   * @return title
  **/
  public String getTitle() {
    return title;
  }

  /**
    * Set title
  **/
  public void setTitle(String title) {
    this.title = title;
  }

  public ListDesignColumn title(String title) {
    this.title = title;
    return this;
  }

 /**
   * Get position
   * @return position
  **/
  public Integer getPosition() {
    return position;
  }

  /**
    * Set position
  **/
  public void setPosition(Integer position) {
    this.position = position;
  }

  public ListDesignColumn position(Integer position) {
    this.position = position;
    return this;
  }

 /**
   * Get sorted
   * @return sorted
  **/
  public Boolean getSorted() {
    return sorted;
  }

  /**
    * Set sorted
  **/
  public void setSorted(Boolean sorted) {
    this.sorted = sorted;
  }

  public ListDesignColumn sorted(Boolean sorted) {
    this.sorted = sorted;
    return this;
  }

 /**
   * Get directory
   * @return directory
  **/
  public String getDirectory() {
    return directory;
  }

  /**
    * Set directory
  **/
  public void setDirectory(String directory) {
    this.directory = directory;
  }

  public ListDesignColumn directory(String directory) {
    this.directory = directory;
    return this;
  }

 /**
   * Get categorized
   * @return categorized
  **/
  public Boolean getCategorized() {
    return categorized;
  }

  /**
    * Set categorized
  **/
  public void setCategorized(Boolean categorized) {
    this.categorized = categorized;
  }

  public ListDesignColumn categorized(Boolean categorized) {
    this.categorized = categorized;
    return this;
  }

 /**
   * Get resortAsc
   * @return resortAsc
  **/
  public Boolean getResortAsc() {
    return resortAsc;
  }

  /**
    * Set resortAsc
  **/
  public void setResortAsc(Boolean resortAsc) {
    this.resortAsc = resortAsc;
  }

  public ListDesignColumn resortAsc(Boolean resortAsc) {
    this.resortAsc = resortAsc;
    return this;
  }

 /**
   * Get resortDesc
   * @return resortDesc
  **/
  public Boolean getResortDesc() {
    return resortDesc;
  }

  /**
    * Set resortDesc
  **/
  public void setResortDesc(Boolean resortDesc) {
    this.resortDesc = resortDesc;
  }

  public ListDesignColumn resortDesc(Boolean resortDesc) {
    this.resortDesc = resortDesc;
    return this;
  }


  /**
    * Create a string representation of this pojo.
  **/
  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListDesignColumn {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    sorted: ").append(toIndentedString(sorted)).append("\n");
    sb.append("    directory: ").append(toIndentedString(directory)).append("\n");
    sb.append("    categorized: ").append(toIndentedString(categorized)).append("\n");
    sb.append("    resortAsc: ").append(toIndentedString(resortAsc)).append("\n");
    sb.append("    resortDesc: ").append(toIndentedString(resortDesc)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private static String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

