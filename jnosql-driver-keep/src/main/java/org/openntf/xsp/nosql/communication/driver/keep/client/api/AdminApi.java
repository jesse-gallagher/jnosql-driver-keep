/**
 * HCL Project KEEP Core API v1
 * REST APIs for Domino and more done right. With declarative security and access to Code, Design and data
 *
 * The version of the OpenAPI document: 4.3.9
 * Contact: HeyHCL@pnp-hcl.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openntf.xsp.nosql.communication.driver.keep.client.api;

import java.util.List;

import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;
import org.openntf.xsp.nosql.communication.driver.keep.client.model.AdminBackup;
import org.openntf.xsp.nosql.communication.driver.keep.client.model.AdminCache;
import org.openntf.xsp.nosql.communication.driver.keep.client.model.KeepAccess;
import org.openntf.xsp.nosql.communication.driver.keep.client.model.KeepAccessQuery;
import org.openntf.xsp.nosql.communication.driver.keep.client.model.KeepInfo;
import org.openntf.xsp.nosql.communication.driver.keep.client.model.OAuthApplicationRequest;
import org.openntf.xsp.nosql.communication.driver.keep.client.model.OAuthApplicationRequestUpdate;
import org.openntf.xsp.nosql.communication.driver.keep.client.model.OAuthApplicationResponse;
import org.openntf.xsp.nosql.communication.driver.keep.client.model.OAuthApplicationSecretRequest;
import org.openntf.xsp.nosql.communication.driver.keep.client.model.OAuthApplicationSecretResponse;
import org.openntf.xsp.nosql.communication.driver.keep.client.model.RestMapping;
import org.openntf.xsp.nosql.communication.driver.keep.client.model.StatusMessage;

import jakarta.validation.Valid;
import jakarta.validation.constraints.NotNull;
import jakarta.ws.rs.Consumes;
import jakarta.ws.rs.DELETE;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.POST;
import jakarta.ws.rs.PUT;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.PathParam;
import jakarta.ws.rs.ProcessingException;
import jakarta.ws.rs.Produces;
import jakarta.ws.rs.QueryParam;

/**
 * HCL Project KEEP Core API v1
 *
 * <p>REST APIs for Domino and more done right. With declarative security and access to Code, Design and data
 *
 */

@RegisterProvider(ApiExceptionMapper.class)
@Path("")
public interface AdminApi  {

    /**
     * Creates an external application
     *
     */
    @POST
    @Path("/admin/application")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    public OAuthApplicationResponse createKeepApplication(@Valid OAuthApplicationRequest oauthApplicationRequest) throws ApiException, ProcessingException;

    /**
     * Restores Keep Config
     *
     * overwrites the existing keep config, use with caution! On your own risk
     *
     */
    @POST
    @Path("/admin/backup")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    public StatusMessage createKeepConfig(@Valid AdminBackup adminBackup) throws ApiException, ProcessingException;

    /**
     * Create a rest configuration
     *
     */
    @POST
    @Path("/admin/scope")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    public RestMapping createUpdateScopeMapping(@Valid RestMapping restMapping, @QueryParam("createSchema") Boolean createSchema) throws ApiException, ProcessingException;

    /**
     * Resets the KEEP cache
     *
     */
    @DELETE
    @Path("/admin/cache")
    @Produces({ "application/json" })
    public StatusMessage deleteCache() throws ApiException, ProcessingException;

    /**
     * Deletes an external application
     *
     */
    @DELETE
    @Path("/admin/application/{client_id}")
    @Produces({ "application/json" })
    public StatusMessage deleteKeepApplication(@PathParam("client_id") String clientId) throws ApiException, ProcessingException;

    /**
     * Remove an application secret
     *
     */
    @DELETE
    @Path("/admin/application/{client_id}/secret")
    @Produces({ "application/json" })
    public StatusMessage deleteKeepApplicationSecret(@PathParam("client_id") String clientId) throws ApiException, ProcessingException;

    /**
     * Delete a rest mapping from the directory
     *
     */
    @DELETE
    @Path("/admin/scope")
    @Produces({ "application/json" })
    public StatusMessage deleteScopeMapping(@QueryParam("dataSource") @NotNull String dataSource) throws ApiException, ProcessingException;

    /**
     * Gets all applications
     *
     */
    @GET
    @Path("/admin/applications/all")
    @Produces({ "application/json" })
    public List<OAuthApplicationResponse> fetchAllApplications() throws ApiException, ProcessingException;

    /**
     * Gets my applications
     *
     */
    @GET
    @Path("/admin/applications")
    @Produces({ "application/json" })
    public List<OAuthApplicationResponse> fetchMyApplications() throws ApiException, ProcessingException;

    /**
     * all restMappings on the server
     *
     * Maps a schemas to scopes
     *
     */
    @GET
    @Path("/admin/scopes")
    @Produces({ "application/json" })
    public List<RestMapping> fetchScopeMappings() throws ApiException, ProcessingException;

    /**
     * Generates a new client_secret
     *
     * The client_secret is used as app password in the oauth Dance
     *
     */
    @POST
    @Path("/admin/application/{client_id}/secret")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    public OAuthApplicationSecretResponse generateKeepApplicationSecret(@PathParam("client_id") String clientId, @Valid OAuthApplicationSecretRequest oauthApplicationSecretRequest, @QueryParam("force") Boolean force) throws ApiException, ProcessingException;

    /**
     * Shows the current status of cached objects
     *
     * Checks on cached objects
     *
     */
    @GET
    @Path("/admin/cache")
    @Produces({ "application/json" })
    public AdminCache getCache() throws ApiException, ProcessingException;

    /**
     * Get information about Domino and KEEP Version
     *
     * JSON element with basic version information
     *
     */
    @GET
    @Path("/info")
    @Produces({ "application/json" })
    public KeepInfo getInfo() throws ApiException, ProcessingException;

    /**
     * Check if user has the right to update mappings
     *
     */
    @GET
    @Path("/admin/access")
    @Produces({ "application/json" })
    public KeepAccess getKeepAccess() throws ApiException, ProcessingException;

    /**
     * Retrieves application configuration
     *
     */
    @GET
    @Path("/admin/application/{client_id}")
    @Produces({ "application/json" })
    public OAuthApplicationResponse getKeepApplication(@PathParam("client_id") String clientId) throws ApiException, ProcessingException;

    /**
     * Retrieves KEEP configuration
     *
     */
    @GET
    @Path("/admin/backup")
    @Produces({ "application/json" })
    public AdminBackup getKeepConfig() throws ApiException, ProcessingException;

    /**
     * Retrieves rest configuration from the server
     *
     * Maps a schema to a scope
     *
     */
    @GET
    @Path("/admin/scope")
    @Produces({ "application/json" })
    public RestMapping getScopeMapping(@QueryParam("scopeName") @NotNull String scopeName) throws ApiException, ProcessingException;

    /**
     * Check for admin access permissions
     *
     */
    @POST
    @Path("/admin/access")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    public KeepAccess queryKeepAccess(@Valid KeepAccessQuery keepAccessQuery) throws ApiException, ProcessingException;

    /**
     * Updates an application configuration
     *
     * Updates an application does not new application secret
     *
     */
    @PUT
    @Path("/admin/application/{client_id}")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    public OAuthApplicationResponse updateKeepApplication(@PathParam("client_id") String clientId, @Valid OAuthApplicationRequestUpdate oauthApplicationRequestUpdate) throws ApiException, ProcessingException;

    /**
     * Merge the KeepConfig with the existing config
     *
     */
    @PUT
    @Path("/admin/backup")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    public StatusMessage updateKeepConfig(@Valid AdminBackup adminBackup) throws ApiException, ProcessingException;
}
