/**
 * HCL Domino REST API basis
 * REST APIs for Domino and more done right. With declarative security and access to Code, Design and Data
 *
 * The version of the OpenAPI document: 1.0.10
 * Contact: HeyHCL@pnp-hcl.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openntf.xsp.nosql.communication.driver.keep.client.model;

import java.time.OffsetDateTime;

import jakarta.json.bind.annotation.JsonbProperty;

/**
  * Result of a JWT login. Contains the JWT token and for convenience the claim in JSON readable format
 **/

public class AuthResult  {
  
 /**
   * JWT Token for system access
  **/
  @JsonbProperty("bearer")
  private String bearer;

 /**
   * Human readable JSON on the JWT claim content
  **/
  @JsonbProperty("claims")
  private Object claims = null;

 /**
   * The JWT library makes use of a leeway (in seconds) to account for when there is a clock skew times between the signing and verifying servers. Allow for a small leeway when checking whether a token has expired.
  **/
  @JsonbProperty("leeway")
  private Integer leeway;

 /**
   * Expire time in seconds. 
  **/
  @JsonbProperty("expSeconds")
  private Integer expSeconds;

  @JsonbProperty("issueDate")
  private OffsetDateTime issueDate;

 /**
   * JWT Token for system access
   * @return bearer
  **/
  public String getBearer() {
    return bearer;
  }

  /**
    * Set bearer
  **/
  public void setBearer(String bearer) {
    this.bearer = bearer;
  }

  public AuthResult bearer(String bearer) {
    this.bearer = bearer;
    return this;
  }

 /**
   * Human readable JSON on the JWT claim content
   * @return claims
  **/
  public Object getClaims() {
    return claims;
  }

  /**
    * Set claims
  **/
  public void setClaims(Object claims) {
    this.claims = claims;
  }

  public AuthResult claims(Object claims) {
    this.claims = claims;
    return this;
  }

 /**
   * The JWT library makes use of a leeway (in seconds) to account for when there is a clock skew times between the signing and verifying servers. Allow for a small leeway when checking whether a token has expired.
   * @return leeway
  **/
  public Integer getLeeway() {
    return leeway;
  }

  /**
    * Set leeway
  **/
  public void setLeeway(Integer leeway) {
    this.leeway = leeway;
  }

  public AuthResult leeway(Integer leeway) {
    this.leeway = leeway;
    return this;
  }

 /**
   * Expire time in seconds. 
   * @return expSeconds
  **/
  public Integer getExpSeconds() {
    return expSeconds;
  }

  /**
    * Set expSeconds
  **/
  public void setExpSeconds(Integer expSeconds) {
    this.expSeconds = expSeconds;
  }

  public AuthResult expSeconds(Integer expSeconds) {
    this.expSeconds = expSeconds;
    return this;
  }

 /**
   * Get issueDate
   * @return issueDate
  **/
  public OffsetDateTime getIssueDate() {
    return issueDate;
  }

  /**
    * Set issueDate
  **/
  public void setIssueDate(OffsetDateTime issueDate) {
    this.issueDate = issueDate;
  }

  public AuthResult issueDate(OffsetDateTime issueDate) {
    this.issueDate = issueDate;
    return this;
  }


  /**
    * Create a string representation of this pojo.
  **/
  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AuthResult {\n");
    
    sb.append("    bearer: ").append(toIndentedString(bearer)).append("\n");
    sb.append("    claims: ").append(toIndentedString(claims)).append("\n");
    sb.append("    leeway: ").append(toIndentedString(leeway)).append("\n");
    sb.append("    expSeconds: ").append(toIndentedString(expSeconds)).append("\n");
    sb.append("    issueDate: ").append(toIndentedString(issueDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private static String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

