/**
 * HCL Project KEEP Core API v1
 * REST APIs for Domino and more done right. With declarative security and access to Code, Design and data
 *
 * The version of the OpenAPI document: 4.3.9
 * Contact: HeyHCL@pnp-hcl.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openntf.xsp.nosql.communication.driver.keep.client.model;

import java.lang.reflect.Type;

import jakarta.json.bind.annotation.JsonbProperty;
import jakarta.json.bind.annotation.JsonbTypeDeserializer;
import jakarta.json.bind.annotation.JsonbTypeSerializer;
import jakarta.json.bind.serializer.DeserializationContext;
import jakarta.json.bind.serializer.JsonbDeserializer;
import jakarta.json.bind.serializer.JsonbSerializer;
import jakarta.json.bind.serializer.SerializationContext;
import jakarta.json.stream.JsonGenerator;
import jakarta.json.stream.JsonParser;
import jakarta.validation.constraints.NotNull;

/**
  * A KeepFieldGroup describes the properites of a group of multi-value Notes items that form \"child records\" inside a single Notes document. Besides multi-value items, items with a common name and a counting suffix can form a field group
 **/

public class KeepFieldGroup  {
  
 /**
   * Name tha links this definition to fieldGroup entries in KeepFields
  **/
  @JsonbProperty("name")
  private String name;

  @JsonbTypeSerializer(TypeEnum.Serializer.class)
  @JsonbTypeDeserializer(TypeEnum.Deserializer.class)
  public enum TypeEnum {

    BYNAME(String.valueOf("byName")), MULTIVALUE(String.valueOf("multiValue"));


    String value;

    TypeEnum (String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    @Override
    public String toString() {
        return String.valueOf(value);
    }

    public static final class Deserializer implements JsonbDeserializer<TypeEnum> {
        @Override
        public TypeEnum deserialize(JsonParser parser, DeserializationContext ctx, Type rtType) {
            for (TypeEnum b : TypeEnum.values()) {
                if (String.valueOf(b.value).equals(parser.getString())) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + parser.getString() + "'");
        }
    }

    public static final class Serializer implements JsonbSerializer<TypeEnum> {
        @Override
        public void serialize(TypeEnum obj, JsonGenerator generator, SerializationContext ctx) {
            generator.write(obj.value);
        }
    }
  }

 /**
   * How is the group formed: by multi-value or common field name with counting suffix 
  **/
  @JsonbProperty("type")
  private TypeEnum type;

 /**
   * Separation character(s) between item name and counter
  **/
  @JsonbProperty("suffix")
  private String suffix;

 /**
   * For name linked items, does the first have the suffix (Name_1) or not (Name)
  **/
  @JsonbProperty("firstWithoutSuffix")
  private Boolean firstWithoutSuffix;

 /**
   * MAximum number of rows/item names to use
  **/
  @JsonbProperty("max")
  private Integer max;

 /**
   * Name tha links this definition to fieldGroup entries in KeepFields
   * @return name
  **/
  @NotNull
  public String getName() {
    return name;
  }

  /**
    * Set name
  **/
  public void setName(String name) {
    this.name = name;
  }

  public KeepFieldGroup name(String name) {
    this.name = name;
    return this;
  }

 /**
   * How is the group formed: by multi-value or common field name with counting suffix 
   * @return type
  **/
  @NotNull
  public TypeEnum getType() {
    return type;
  }

  /**
    * Set type
  **/
  public void setType(TypeEnum type) {
    this.type = type;
  }

  public KeepFieldGroup type(TypeEnum type) {
    this.type = type;
    return this;
  }

 /**
   * Separation character(s) between item name and counter
   * @return suffix
  **/
  @NotNull
  public String getSuffix() {
    return suffix;
  }

  /**
    * Set suffix
  **/
  public void setSuffix(String suffix) {
    this.suffix = suffix;
  }

  public KeepFieldGroup suffix(String suffix) {
    this.suffix = suffix;
    return this;
  }

 /**
   * For name linked items, does the first have the suffix (Name_1) or not (Name)
   * @return firstWithoutSuffix
  **/
  public Boolean getFirstWithoutSuffix() {
    return firstWithoutSuffix;
  }

  /**
    * Set firstWithoutSuffix
  **/
  public void setFirstWithoutSuffix(Boolean firstWithoutSuffix) {
    this.firstWithoutSuffix = firstWithoutSuffix;
  }

  public KeepFieldGroup firstWithoutSuffix(Boolean firstWithoutSuffix) {
    this.firstWithoutSuffix = firstWithoutSuffix;
    return this;
  }

 /**
   * MAximum number of rows/item names to use
   * @return max
  **/
  public Integer getMax() {
    return max;
  }

  /**
    * Set max
  **/
  public void setMax(Integer max) {
    this.max = max;
  }

  public KeepFieldGroup max(Integer max) {
    this.max = max;
    return this;
  }


  /**
    * Create a string representation of this pojo.
  **/
  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class KeepFieldGroup {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    suffix: ").append(toIndentedString(suffix)).append("\n");
    sb.append("    firstWithoutSuffix: ").append(toIndentedString(firstWithoutSuffix)).append("\n");
    sb.append("    max: ").append(toIndentedString(max)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private static String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

