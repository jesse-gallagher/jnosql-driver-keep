/**
 * HCL Domino REST API basis
 * REST APIs for Domino and more done right. With declarative security and access to Code, Design and Data
 *
 * The version of the OpenAPI document: 1.0.10
 * Contact: HeyHCL@pnp-hcl.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openntf.xsp.nosql.communication.driver.keep.client.model;

import java.lang.reflect.Type;

import jakarta.json.bind.annotation.JsonbProperty;
import jakarta.json.bind.annotation.JsonbTypeDeserializer;
import jakarta.json.bind.annotation.JsonbTypeSerializer;
import jakarta.json.bind.serializer.DeserializationContext;
import jakarta.json.bind.serializer.JsonbDeserializer;
import jakarta.json.bind.serializer.JsonbSerializer;
import jakarta.json.bind.serializer.SerializationContext;
import jakarta.json.stream.JsonGenerator;
import jakarta.json.stream.JsonParser;
import jakarta.validation.constraints.NotNull;

/**
  * API way to get a token for Domino IdP login
 **/

public class BasicAuthForOauthFlow  {
  
 /**
   * Password, not written on a Post-it
  **/
  @JsonbProperty("password")
  private String password;

 /**
   * Who you are or your eMail
  **/
  @JsonbProperty("username")
  private String username;

  @JsonbTypeSerializer(ScopeEnum.Serializer.class)
  @JsonbTypeDeserializer(ScopeEnum.Deserializer.class)
  public enum ScopeEnum {

    OAUTH(String.valueOf("oauth"));


    String value;

    ScopeEnum (String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    @Override
    public String toString() {
        return String.valueOf(value);
    }

    public static final class Deserializer implements JsonbDeserializer<ScopeEnum> {
        @Override
        public ScopeEnum deserialize(JsonParser parser, DeserializationContext ctx, Type rtType) {
            for (ScopeEnum b : ScopeEnum.values()) {
                if (String.valueOf(b.value).equals(parser.getString())) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + parser.getString() + "'");
        }
    }

    public static final class Serializer implements JsonbSerializer<ScopeEnum> {
        @Override
        public void serialize(ScopeEnum obj, JsonGenerator generator, SerializationContext ctx) {
            generator.write(obj.value);
        }
    }
  }

 /**
   * mandatory scope value of 'oauth' 
  **/
  @JsonbProperty("scope")
  private ScopeEnum scope;

 /**
   * Password, not written on a Post-it
   * @return password
  **/
  @NotNull
  public String getPassword() {
    return password;
  }

  /**
    * Set password
  **/
  public void setPassword(String password) {
    this.password = password;
  }

  public BasicAuthForOauthFlow password(String password) {
    this.password = password;
    return this;
  }

 /**
   * Who you are or your eMail
   * @return username
  **/
  @NotNull
  public String getUsername() {
    return username;
  }

  /**
    * Set username
  **/
  public void setUsername(String username) {
    this.username = username;
  }

  public BasicAuthForOauthFlow username(String username) {
    this.username = username;
    return this;
  }

 /**
   * mandatory scope value of &#39;oauth&#39; 
   * @return scope
  **/
  @NotNull
  public ScopeEnum getScope() {
    return scope;
  }

  /**
    * Set scope
  **/
  public void setScope(ScopeEnum scope) {
    this.scope = scope;
  }

  public BasicAuthForOauthFlow scope(ScopeEnum scope) {
    this.scope = scope;
    return this;
  }


  /**
    * Create a string representation of this pojo.
  **/
  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BasicAuthForOauthFlow {\n");
    
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private static String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

