/**
 * Copyright Â© 2022-2023 Jesse Gallagher
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * HCL Domino REST API basis
 * REST APIs for Domino and more done right. With declarative security and access to Code, Design and Data
 *
 * The version of the OpenAPI document: 1.0.8
 * Contact: HeyHCL@pnp-hcl.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openntf.xsp.nosql.communication.driver.keep.client.model;

import java.util.List;
import jakarta.json.bind.annotation.JsonbProperty;
import jakarta.validation.constraints.NotNull;

/**
 * Result from design query. Names and uniqueIds TODO: Add form/view details
 **/

public class ListDesignItem {

  /**
   * Title of the view or folder
   **/
  @JsonbProperty("title")
  private String title;

  /**
   * true = it is a folder where user interaction or code determines the content false = it is a
   * view with a fixed query, a.k.a View selection formula
   **/
  @JsonbProperty("isFolder")
  private Boolean isFolder;

  /**
   * UNID of the underlying View design element
   **/
  @JsonbProperty("unid")
  private String unid;

  /**
   * Aliases for the view title
   **/
  @JsonbProperty("aliases")
  private List<String> aliases = null;

  /**
   * If design item has a type, noted here.
   **/
  @JsonbProperty("type")
  private String type;

  /**
   * Column information with at least title
   **/
  @JsonbProperty("columns")
  private List<Object> columns = null;

  /**
   * Title of the view or folder
   * 
   * @return title
   **/
  @NotNull
  public String getTitle() {
    return title;
  }

  /**
   * Set title
   **/
  public void setTitle(String title) {
    this.title = title;
  }

  public ListDesignItem title(String title) {
    this.title = title;
    return this;
  }

  /**
   * true &#x3D; it is a folder where user interaction or code determines the content false &#x3D;
   * it is a view with a fixed query, a.k.a View selection formula
   * 
   * @return isFolder
   **/
  @NotNull
  public Boolean getIsFolder() {
    return isFolder;
  }

  /**
   * Set isFolder
   **/
  public void setIsFolder(Boolean isFolder) {
    this.isFolder = isFolder;
  }

  public ListDesignItem isFolder(Boolean isFolder) {
    this.isFolder = isFolder;
    return this;
  }

  /**
   * UNID of the underlying View design element
   * 
   * @return unid
   **/
  public String getUnid() {
    return unid;
  }

  /**
   * Set unid
   **/
  public void setUnid(String unid) {
    this.unid = unid;
  }

  public ListDesignItem unid(String unid) {
    this.unid = unid;
    return this;
  }

  /**
   * Aliases for the view title
   * 
   * @return aliases
   **/
  public List<String> getAliases() {
    return aliases;
  }

  /**
   * Set aliases
   **/
  public void setAliases(List<String> aliases) {
    this.aliases = aliases;
  }

  public ListDesignItem aliases(List<String> aliases) {
    this.aliases = aliases;
    return this;
  }

  public ListDesignItem addAliasesItem(String aliasesItem) {
    this.aliases.add(aliasesItem);
    return this;
  }

  /**
   * If design item has a type, noted here.
   * 
   * @return type
   **/
  public String getType() {
    return type;
  }

  /**
   * Set type
   **/
  public void setType(String type) {
    this.type = type;
  }

  public ListDesignItem type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Column information with at least title
   * 
   * @return columns
   **/
  public List<Object> getColumns() {
    return columns;
  }

  /**
   * Set columns
   **/
  public void setColumns(List<Object> columns) {
    this.columns = columns;
  }

  public ListDesignItem columns(List<Object> columns) {
    this.columns = columns;
    return this;
  }

  public ListDesignItem addColumnsItem(Object columnsItem) {
    this.columns.add(columnsItem);
    return this;
  }


  /**
   * Create a string representation of this pojo.
   **/
  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListDesignItem {\n");

    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    isFolder: ").append(toIndentedString(isFolder)).append("\n");
    sb.append("    unid: ").append(toIndentedString(unid)).append("\n");
    sb.append("    aliases: ").append(toIndentedString(aliases)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    columns: ").append(toIndentedString(columns)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private static String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

