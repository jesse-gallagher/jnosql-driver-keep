/**
 * HCL Domino REST API basis
 * REST APIs for Domino and more done right. With declarative security and access to Code, Design and Data
 *
 * The version of the OpenAPI document: 1.0.8
 * Contact: HeyHCL@pnp-hcl.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openntf.xsp.nosql.communication.driver.keep.client.model;

import java.util.List;
import jakarta.json.bind.annotation.JsonbProperty;
import jakarta.validation.constraints.NotNull;

/**
 * Query and constraints for a DQL query to Domino. If not passing property 'mode', it will search
 * from mode 'dql'.
 **/

public class QueryRequest {

  /**
   * Specifies the maximum allowable number of documents scanned across all query terms. DQL
   * execution returns an error when exceeded. Default is 500,000.
   **/
  @JsonbProperty("maxScanDocs")
  private Integer maxScanDocs;

  /**
   * Specifies the maximum allowable number of view entries scanned across all query terms. DQL
   * execution return an error when exceeded. Default is 200,000.
   **/
  @JsonbProperty("maxScanEntries")
  private Integer maxScanEntries;

  /**
   * Specifies not to perform any view processing in satisfying a query. Default is False (off).
   **/
  @JsonbProperty("noViews")
  private Boolean noViews;

  /**
   * The DQL query snippet.
   **/
  @JsonbProperty("query")
  private String query;

  /**
   * Specifies the maximum allowable seconds a DQL query is allowed to run. DQL execution returns an
   * error when exceeded. Default is 300 (5 minutes).
   **/
  @JsonbProperty("timeoutSecs")
  private Integer timeoutSecs;

  /**
   * Key/Value to replace ?Variables in property \"query\".
   **/
  @JsonbProperty("variables")
  private Object variables;

  /**
   * Refresh a UI view to match its associated back-end view.
   **/
  @JsonbProperty("viewRefresh")
  private Boolean viewRefresh;

  /**
   * This is form mode configured in Domino REST API for a database. If no mode has been passed, it
   * will use default \"dql\".
   **/
  @JsonbProperty("mode")
  private String mode;

  /**
   * List of form names to be added to the query. Domino REST API will lookup all potential alias
   * values and add them to the query clause
   **/
  @JsonbProperty("forms")
  private List<String> forms = null;

  /**
   * If form names added to the query, this parameter will indicate whether all form alias should be
   * included in the query clause.
   **/
  @JsonbProperty("includeFormAlias")
  private Boolean includeFormAlias;

  /**
   * Specifies the maximum allowable number of documents scanned across all query terms. DQL
   * execution returns an error when exceeded. Default is 500,000.
   * 
   * @return maxScanDocs
   **/
  public Integer getMaxScanDocs() {
    return maxScanDocs;
  }

  /**
   * Set maxScanDocs
   **/
  public void setMaxScanDocs(Integer maxScanDocs) {
    this.maxScanDocs = maxScanDocs;
  }

  public QueryRequest maxScanDocs(Integer maxScanDocs) {
    this.maxScanDocs = maxScanDocs;
    return this;
  }

  /**
   * Specifies the maximum allowable number of view entries scanned across all query terms. DQL
   * execution return an error when exceeded. Default is 200,000.
   * 
   * @return maxScanEntries
   **/
  public Integer getMaxScanEntries() {
    return maxScanEntries;
  }

  /**
   * Set maxScanEntries
   **/
  public void setMaxScanEntries(Integer maxScanEntries) {
    this.maxScanEntries = maxScanEntries;
  }

  public QueryRequest maxScanEntries(Integer maxScanEntries) {
    this.maxScanEntries = maxScanEntries;
    return this;
  }

  /**
   * Specifies not to perform any view processing in satisfying a query. Default is False (off).
   * 
   * @return noViews
   **/
  public Boolean getNoViews() {
    return noViews;
  }

  /**
   * Set noViews
   **/
  public void setNoViews(Boolean noViews) {
    this.noViews = noViews;
  }

  public QueryRequest noViews(Boolean noViews) {
    this.noViews = noViews;
    return this;
  }

  /**
   * The DQL query snippet.
   * 
   * @return query
   **/
  @NotNull
  public String getQuery() {
    return query;
  }

  /**
   * Set query
   **/
  public void setQuery(String query) {
    this.query = query;
  }

  public QueryRequest query(String query) {
    this.query = query;
    return this;
  }

  /**
   * Specifies the maximum allowable seconds a DQL query is allowed to run. DQL execution returns an
   * error when exceeded. Default is 300 (5 minutes).
   * 
   * @return timeoutSecs
   **/
  public Integer getTimeoutSecs() {
    return timeoutSecs;
  }

  /**
   * Set timeoutSecs
   **/
  public void setTimeoutSecs(Integer timeoutSecs) {
    this.timeoutSecs = timeoutSecs;
  }

  public QueryRequest timeoutSecs(Integer timeoutSecs) {
    this.timeoutSecs = timeoutSecs;
    return this;
  }

  /**
   * Key/Value to replace ?Variables in property \&quot;query\&quot;.
   * 
   * @return variables
   **/
  public Object getVariables() {
    return variables;
  }

  /**
   * Set variables
   **/
  public void setVariables(Object variables) {
    this.variables = variables;
  }

  public QueryRequest variables(Object variables) {
    this.variables = variables;
    return this;
  }

  /**
   * Refresh a UI view to match its associated back-end view.
   * 
   * @return viewRefresh
   **/
  public Boolean getViewRefresh() {
    return viewRefresh;
  }

  /**
   * Set viewRefresh
   **/
  public void setViewRefresh(Boolean viewRefresh) {
    this.viewRefresh = viewRefresh;
  }

  public QueryRequest viewRefresh(Boolean viewRefresh) {
    this.viewRefresh = viewRefresh;
    return this;
  }

  /**
   * This is form mode configured in Domino REST API for a database. If no mode has been passed, it
   * will use default \&quot;dql\&quot;.
   * 
   * @return mode
   **/
  public String getMode() {
    return mode;
  }

  /**
   * Set mode
   **/
  public void setMode(String mode) {
    this.mode = mode;
  }

  public QueryRequest mode(String mode) {
    this.mode = mode;
    return this;
  }

  /**
   * List of form names to be added to the query. Domino REST API will lookup all potential alias
   * values and add them to the query clause
   * 
   * @return forms
   **/
  public List<String> getForms() {
    return forms;
  }

  /**
   * Set forms
   **/
  public void setForms(List<String> forms) {
    this.forms = forms;
  }

  public QueryRequest forms(List<String> forms) {
    this.forms = forms;
    return this;
  }

  public QueryRequest addFormsItem(String formsItem) {
    this.forms.add(formsItem);
    return this;
  }

  /**
   * If form names added to the query, this parameter will indicate whether all form alias should be
   * included in the query clause.
   * 
   * @return includeFormAlias
   **/
  public Boolean getIncludeFormAlias() {
    return includeFormAlias;
  }

  /**
   * Set includeFormAlias
   **/
  public void setIncludeFormAlias(Boolean includeFormAlias) {
    this.includeFormAlias = includeFormAlias;
  }

  public QueryRequest includeFormAlias(Boolean includeFormAlias) {
    this.includeFormAlias = includeFormAlias;
    return this;
  }


  /**
   * Create a string representation of this pojo.
   **/
  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QueryRequest {\n");

    sb.append("    maxScanDocs: ").append(toIndentedString(maxScanDocs)).append("\n");
    sb.append("    maxScanEntries: ").append(toIndentedString(maxScanEntries)).append("\n");
    sb.append("    noViews: ").append(toIndentedString(noViews)).append("\n");
    sb.append("    query: ").append(toIndentedString(query)).append("\n");
    sb.append("    timeoutSecs: ").append(toIndentedString(timeoutSecs)).append("\n");
    sb.append("    variables: ").append(toIndentedString(variables)).append("\n");
    sb.append("    viewRefresh: ").append(toIndentedString(viewRefresh)).append("\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("    forms: ").append(toIndentedString(forms)).append("\n");
    sb.append("    includeFormAlias: ").append(toIndentedString(includeFormAlias)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private static String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

