/**
 * HCL Project KEEP Core API v1
 * REST APIs for Domino and more done right. With declarative security and access to Code, Design and data
 *
 * The version of the OpenAPI document: 4.3.9
 * Contact: HeyHCL@pnp-hcl.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openntf.xsp.nosql.communication.driver.keep.client.api;

import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;
import org.openntf.xsp.nosql.communication.driver.keep.client.model.AuthResult;
import org.openntf.xsp.nosql.communication.driver.keep.client.model.BasicAuthForOauthFlow;
import org.openntf.xsp.nosql.communication.driver.keep.client.model.BasicAuthRequest;
import org.openntf.xsp.nosql.communication.driver.keep.client.model.LogoutBody;
import org.openntf.xsp.nosql.communication.driver.keep.client.model.StatusMessage;

import jakarta.validation.Valid;
import jakarta.ws.rs.Consumes;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.POST;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.ProcessingException;
import jakarta.ws.rs.Produces;

/**
 * HCL Project KEEP Core API v1
 *
 * <p>REST APIs for Domino and more done right. With declarative security and access to Code, Design and data
 *
 */

@RegisterProvider(ApiExceptionMapper.class)
@Path("")
public interface AuthenticationApi  {

    /**
     * establish session with local Notes.id
     *
     * Allows for a local (Notes client) deployment to get a session based on the local Notes.id Suitable for applications that are installed local
     *
     */
    @GET
    @Path("/auth/local")
    @Produces({ "application/json" })
    public AuthResult authLocal() throws ApiException, ProcessingException;

    /**
     * Get JWT Session
     *
     * Login and retrieve JWT token
     *
     */
    @POST
    @Path("/auth")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    public AuthResult authLogin(@Valid BasicAuthRequest basicAuthRequest) throws ApiException, ProcessingException;

    /**
     * Get identity information
     *
     * Submit username and password in an authentication header and get valid JWT in return
     *
     */
    @GET
    @Path("/auth/basic")
    @Produces({ "application/json" })
    public AuthResult authLoginBasic() throws ApiException, ProcessingException;

    /**
     * Logout and invalidate token
     *
     */
    @POST
    @Path("/auth/logout")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    public StatusMessage authLogout(@Valid LogoutBody logoutBody) throws ApiException, ProcessingException;

    /**
     * Get a new JWT for processing
     *
     */
    @POST
    @Path("/auth/extend")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    public AuthResult authRenewJwt(@Valid AuthResult authResult) throws ApiException, ProcessingException;

    /**
     * Get JWT Session for OAuth consent screen
     *
     * Username, Password &amp; scopes &#x3D; \&quot;oauth\&quot; are required to use this endpoint
     *
     */
    @POST
    @Path("/authforoauthflow")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    public AuthResult loginForOAuthFlow(@Valid BasicAuthForOauthFlow basicAuthForOauthFlow) throws ApiException, ProcessingException;
}
