/**
 * HCL Project KEEP Core API v1
 * REST APIs for Domino and more done right. With declarative security and access to Code, Design and data
 *
 * The version of the OpenAPI document: 4.3.9
 * Contact: HeyHCL@pnp-hcl.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openntf.xsp.nosql.communication.driver.keep.client.api;

import java.util.List;

import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;
import org.openntf.xsp.nosql.communication.driver.keep.client.model.KeepDBShort;
import org.openntf.xsp.nosql.communication.driver.keep.client.model.KeepDatabase;
import org.openntf.xsp.nosql.communication.driver.keep.client.model.KeepForm;

import jakarta.validation.constraints.NotNull;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.PathParam;
import jakarta.ws.rs.ProcessingException;
import jakarta.ws.rs.Produces;
import jakarta.ws.rs.QueryParam;

/**
 * HCL Project KEEP Core API v1
 *
 * <p>REST APIs for Domino and more done right. With declarative security and access to Code, Design and data
 *
 */

@RegisterProvider(ApiExceptionMapper.class)
@Path("")
public interface ScopeApi  {

    /**
     * Retrieves configuration for one mode of a form of a scope mapped to a database schema
     *
     */
    @GET
    @Path("/scope/mode/{form}/{mode}")
    @Produces({ "application/json" })
    public KeepForm fetchFormModes(@QueryParam("dataSource") @NotNull String dataSource, @PathParam("form") String form, @PathParam("mode") String mode) throws ApiException, ProcessingException;

    /**
     * Retrieve lists of databases available based on query
     *
     * Get a list of databases enabled by the Domino Administrator for Keep access as JSON
     *
     */
    @GET
    @Path("/scopes")
    @Produces({ "application/json" })
    public List<KeepDBShort> fetchScopes(@QueryParam("includeAll") Boolean includeAll, @QueryParam("skipIcon") Boolean skipIcon) throws ApiException, ProcessingException;

    /**
     * Retrieves configuration for one scope mapped to a database schema
     *
     */
    @GET
    @Path("/scope")
    @Produces({ "application/json" })
    public KeepDatabase getScope(@QueryParam("dataSource") @NotNull String dataSource) throws ApiException, ProcessingException;

    /**
     * Provides information on ACCESS levels for current user
     *
     */
    @GET
    @Path("/scope/access")
    @Produces({ "application/json" })
    public Object getScopeAccess(@QueryParam("dataSource") @NotNull String dataSource) throws ApiException, ProcessingException;

    /**
     * Retrieves configuration for one form of a scope mapped to a database schema
     *
     */
    @GET
    @Path("/scope/form/{form}")
    @Produces({ "application/json" })
    public KeepForm getScopeForm(@QueryParam("dataSource") @NotNull String dataSource, @PathParam("form") String form) throws ApiException, ProcessingException;
}
