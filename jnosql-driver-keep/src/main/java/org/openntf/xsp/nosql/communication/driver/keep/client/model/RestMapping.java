/**
 * Copyright Â© 2022-2023 Jesse Gallagher
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * HCL Domino REST API basis
 * REST APIs for Domino and more done right. With declarative security and access to Code, Design and Data
 *
 * The version of the OpenAPI document: 1.0.8
 * Contact: HeyHCL@pnp-hcl.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openntf.xsp.nosql.communication.driver.keep.client.model;

import java.util.List;
import jakarta.json.bind.annotation.JsonbProperty;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Pattern;

/**
 * Maps a rest config from its internal name to the name it is visible. Info can be seen in the
 * Internet sites of the domino directory. Also known as scope
 **/

public class RestMapping {

  /**
   * Document meta data.
   **/
  @JsonbProperty("@meta")
  private Object atMeta;

  /**
   * Name that is used in ?datSsource= parameter to access mapped resource
   **/
  @JsonbProperty("apiName")
  private String apiName;

  /**
   * Allows to enable/disable API access without removing cofiguration
   **/
  @JsonbProperty("isActive")
  private Boolean isActive;

  /**
   * This field records the current revision version of document. It's a 32-character hex-encoded
   * string of date.
   **/
  @JsonbProperty("@Revisions")
  private List<String> atRevisions = null;

  /**
   * The user who update the doc.
   **/
  @JsonbProperty("@UpdatedBy")
  private List<String> atUpdatedBy = null;

  /**
   * name (without .json extension) of schema file in nsf REST file resources
   **/
  @JsonbProperty("schemaName")
  private String schemaName;

  /**
   * path relative to Domino data directory to nsf database
   **/
  @JsonbProperty("nsfPath")
  private String nsfPath;

  /**
   * Human readable explanation
   **/
  @JsonbProperty("description")
  private String description;

  /**
   * Form name
   **/
  @JsonbProperty("Form")
  private String form;

  /**
   * 
  **/
  @JsonbProperty("Type")
  private String type;

  /**
   * Default to be false if you don't set this property. It won't create the schema. When set to be
   * true, it will create schema using given schemaName.
   **/
  @JsonbProperty("createSchema")
  private Integer createSchema;

  /**
   * Domino server name that this scope is enabled on. Empty or '*' mean that this scope is enabled
   * on all Domino servers.
   **/
  @JsonbProperty("server")
  private String server;

  /**
   * Document meta data.
   * 
   * @return atMeta
   **/
  public Object getAtMeta() {
    return atMeta;
  }

  /**
   * Set atMeta
   **/
  public void setAtMeta(Object atMeta) {
    this.atMeta = atMeta;
  }

  public RestMapping atMeta(Object atMeta) {
    this.atMeta = atMeta;
    return this;
  }

  /**
   * Name that is used in ?datSsource&#x3D; parameter to access mapped resource
   * 
   * @return apiName
   **/
  @NotNull
  @Pattern(regexp = "[a-z0-9]")
  public String getApiName() {
    return apiName;
  }

  /**
   * Set apiName
   **/
  public void setApiName(String apiName) {
    this.apiName = apiName;
  }

  public RestMapping apiName(String apiName) {
    this.apiName = apiName;
    return this;
  }

  /**
   * Allows to enable/disable API access without removing cofiguration
   * 
   * @return isActive
   **/
  @NotNull
  public Boolean getIsActive() {
    return isActive;
  }

  /**
   * Set isActive
   **/
  public void setIsActive(Boolean isActive) {
    this.isActive = isActive;
  }

  public RestMapping isActive(Boolean isActive) {
    this.isActive = isActive;
    return this;
  }

  /**
   * This field records the current revision version of document. It&#39;s a 32-character
   * hex-encoded string of date.
   * 
   * @return atRevisions
   **/
  public List<String> getAtRevisions() {
    return atRevisions;
  }

  /**
   * Set atRevisions
   **/
  public void setAtRevisions(List<String> atRevisions) {
    this.atRevisions = atRevisions;
  }

  public RestMapping atRevisions(List<String> atRevisions) {
    this.atRevisions = atRevisions;
    return this;
  }

  public RestMapping addAtRevisionsItem(String atRevisionsItem) {
    this.atRevisions.add(atRevisionsItem);
    return this;
  }

  /**
   * The user who update the doc.
   * 
   * @return atUpdatedBy
   **/
  public List<String> getAtUpdatedBy() {
    return atUpdatedBy;
  }

  /**
   * Set atUpdatedBy
   **/
  public void setAtUpdatedBy(List<String> atUpdatedBy) {
    this.atUpdatedBy = atUpdatedBy;
  }

  public RestMapping atUpdatedBy(List<String> atUpdatedBy) {
    this.atUpdatedBy = atUpdatedBy;
    return this;
  }

  public RestMapping addAtUpdatedByItem(String atUpdatedByItem) {
    this.atUpdatedBy.add(atUpdatedByItem);
    return this;
  }

  /**
   * name (without .json extension) of schema file in nsf REST file resources
   * 
   * @return schemaName
   **/
  @NotNull
  @Pattern(regexp = "[a-z0-9]")
  public String getSchemaName() {
    return schemaName;
  }

  /**
   * Set schemaName
   **/
  public void setSchemaName(String schemaName) {
    this.schemaName = schemaName;
  }

  public RestMapping schemaName(String schemaName) {
    this.schemaName = schemaName;
    return this;
  }

  /**
   * path relative to Domino data directory to nsf database
   * 
   * @return nsfPath
   **/
  @NotNull
  public String getNsfPath() {
    return nsfPath;
  }

  /**
   * Set nsfPath
   **/
  public void setNsfPath(String nsfPath) {
    this.nsfPath = nsfPath;
  }

  public RestMapping nsfPath(String nsfPath) {
    this.nsfPath = nsfPath;
    return this;
  }

  /**
   * Human readable explanation
   * 
   * @return description
   **/
  public String getDescription() {
    return description;
  }

  /**
   * Set description
   **/
  public void setDescription(String description) {
    this.description = description;
  }

  public RestMapping description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Form name
   * 
   * @return form
   **/
  public String getForm() {
    return form;
  }

  /**
   * Set form
   **/
  public void setForm(String form) {
    this.form = form;
  }

  public RestMapping form(String form) {
    this.form = form;
    return this;
  }

  /**
   * @return type
   **/
  public String getType() {
    return type;
  }

  /**
   * Set type
   **/
  public void setType(String type) {
    this.type = type;
  }

  public RestMapping type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Default to be false if you don&#39;t set this property. It won&#39;t create the schema. When
   * set to be true, it will create schema using given schemaName.
   * 
   * @return createSchema
   **/
  public Integer getCreateSchema() {
    return createSchema;
  }

  /**
   * Set createSchema
   **/
  public void setCreateSchema(Integer createSchema) {
    this.createSchema = createSchema;
  }

  public RestMapping createSchema(Integer createSchema) {
    this.createSchema = createSchema;
    return this;
  }

  /**
   * Domino server name that this scope is enabled on. Empty or &#39;*&#39; mean that this scope is
   * enabled on all Domino servers.
   * 
   * @return server
   **/
  public String getServer() {
    return server;
  }

  /**
   * Set server
   **/
  public void setServer(String server) {
    this.server = server;
  }

  public RestMapping server(String server) {
    this.server = server;
    return this;
  }


  /**
   * Create a string representation of this pojo.
   **/
  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RestMapping {\n");

    sb.append("    atMeta: ").append(toIndentedString(atMeta)).append("\n");
    sb.append("    apiName: ").append(toIndentedString(apiName)).append("\n");
    sb.append("    isActive: ").append(toIndentedString(isActive)).append("\n");
    sb.append("    atRevisions: ").append(toIndentedString(atRevisions)).append("\n");
    sb.append("    atUpdatedBy: ").append(toIndentedString(atUpdatedBy)).append("\n");
    sb.append("    schemaName: ").append(toIndentedString(schemaName)).append("\n");
    sb.append("    nsfPath: ").append(toIndentedString(nsfPath)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    form: ").append(toIndentedString(form)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    createSchema: ").append(toIndentedString(createSchema)).append("\n");
    sb.append("    server: ").append(toIndentedString(server)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private static String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

