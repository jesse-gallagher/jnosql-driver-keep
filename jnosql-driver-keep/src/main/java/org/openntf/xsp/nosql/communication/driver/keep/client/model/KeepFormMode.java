/**
 * HCL Domino REST API basis
 * REST APIs for Domino and more done right. With declarative security and access to Code, Design and Data
 *
 * The version of the OpenAPI document: 1.0.10
 * Contact: HeyHCL@pnp-hcl.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openntf.xsp.nosql.communication.driver.keep.client.model;

import java.util.ArrayList;
import java.util.List;

import jakarta.json.bind.annotation.JsonbProperty;
import jakarta.validation.constraints.NotNull;

/**
  * Form modes for Domino REST API Database config
 **/

public class KeepFormMode  {
  
 /**
   * Compute with form before saving
  **/
  @JsonbProperty("computeWithForm")
  private Boolean computeWithForm;

  @JsonbProperty("deleteAccessFormula")
  private KeepFormula deleteAccessFormula;

 /**
   * lowercase, name of the mode. Special names are default and odata 
  **/
  @JsonbProperty("modeName")
  private String modeName;

  @JsonbProperty("onLoad")
  private KeepFormula onLoad;

  @JsonbProperty("onSave")
  private KeepFormula onSave;

  @JsonbProperty("readAccessFormula")
  private KeepFormula readAccessFormula;

  @JsonbProperty("writeAccessFormula")
  private KeepFormula writeAccessFormula;

 /**
   * formula rules to determine access
  **/
  @JsonbProperty("validationRules")
  private List<KeepFormula> validationRules = null;

 /**
   * all fields in this mode
  **/
  @JsonbProperty("fields")
  private List<KeepField> fields = new ArrayList<>();

 /**
   * List of fields that are required to be provided
  **/
  @JsonbProperty("required")
  private List<String> required = null;

 /**
   * read access fields in this mode
  **/
  @JsonbProperty("readAccessFields")
  private List<KeepField> readAccessFields = null;

 /**
   * write access fields in this mode
  **/
  @JsonbProperty("writeAccessFields")
  private List<KeepField> writeAccessFields = null;

 /**
   * Compute with form before saving
   * @return computeWithForm
  **/
  public Boolean getComputeWithForm() {
    return computeWithForm;
  }

  /**
    * Set computeWithForm
  **/
  public void setComputeWithForm(Boolean computeWithForm) {
    this.computeWithForm = computeWithForm;
  }

  public KeepFormMode computeWithForm(Boolean computeWithForm) {
    this.computeWithForm = computeWithForm;
    return this;
  }

 /**
   * Get deleteAccessFormula
   * @return deleteAccessFormula
  **/
  @NotNull
  public KeepFormula getDeleteAccessFormula() {
    return deleteAccessFormula;
  }

  /**
    * Set deleteAccessFormula
  **/
  public void setDeleteAccessFormula(KeepFormula deleteAccessFormula) {
    this.deleteAccessFormula = deleteAccessFormula;
  }

  public KeepFormMode deleteAccessFormula(KeepFormula deleteAccessFormula) {
    this.deleteAccessFormula = deleteAccessFormula;
    return this;
  }

 /**
   * lowercase, name of the mode. Special names are default and odata 
   * @return modeName
  **/
  @NotNull
  public String getModeName() {
    return modeName;
  }

  /**
    * Set modeName
  **/
  public void setModeName(String modeName) {
    this.modeName = modeName;
  }

  public KeepFormMode modeName(String modeName) {
    this.modeName = modeName;
    return this;
  }

 /**
   * Get onLoad
   * @return onLoad
  **/
  public KeepFormula getOnLoad() {
    return onLoad;
  }

  /**
    * Set onLoad
  **/
  public void setOnLoad(KeepFormula onLoad) {
    this.onLoad = onLoad;
  }

  public KeepFormMode onLoad(KeepFormula onLoad) {
    this.onLoad = onLoad;
    return this;
  }

 /**
   * Get onSave
   * @return onSave
  **/
  public KeepFormula getOnSave() {
    return onSave;
  }

  /**
    * Set onSave
  **/
  public void setOnSave(KeepFormula onSave) {
    this.onSave = onSave;
  }

  public KeepFormMode onSave(KeepFormula onSave) {
    this.onSave = onSave;
    return this;
  }

 /**
   * Get readAccessFormula
   * @return readAccessFormula
  **/
  @NotNull
  public KeepFormula getReadAccessFormula() {
    return readAccessFormula;
  }

  /**
    * Set readAccessFormula
  **/
  public void setReadAccessFormula(KeepFormula readAccessFormula) {
    this.readAccessFormula = readAccessFormula;
  }

  public KeepFormMode readAccessFormula(KeepFormula readAccessFormula) {
    this.readAccessFormula = readAccessFormula;
    return this;
  }

 /**
   * Get writeAccessFormula
   * @return writeAccessFormula
  **/
  @NotNull
  public KeepFormula getWriteAccessFormula() {
    return writeAccessFormula;
  }

  /**
    * Set writeAccessFormula
  **/
  public void setWriteAccessFormula(KeepFormula writeAccessFormula) {
    this.writeAccessFormula = writeAccessFormula;
  }

  public KeepFormMode writeAccessFormula(KeepFormula writeAccessFormula) {
    this.writeAccessFormula = writeAccessFormula;
    return this;
  }

 /**
   * formula rules to determine access
   * @return validationRules
  **/
  public List<KeepFormula> getValidationRules() {
    return validationRules;
  }

  /**
    * Set validationRules
  **/
  public void setValidationRules(List<KeepFormula> validationRules) {
    this.validationRules = validationRules;
  }

  public KeepFormMode validationRules(List<KeepFormula> validationRules) {
    this.validationRules = validationRules;
    return this;
  }

  public KeepFormMode addValidationRulesItem(KeepFormula validationRulesItem) {
    this.validationRules.add(validationRulesItem);
    return this;
  }

 /**
   * all fields in this mode
   * @return fields
  **/
  @NotNull
  public List<KeepField> getFields() {
    return fields;
  }

  /**
    * Set fields
  **/
  public void setFields(List<KeepField> fields) {
    this.fields = fields;
  }

  public KeepFormMode fields(List<KeepField> fields) {
    this.fields = fields;
    return this;
  }

  public KeepFormMode addFieldsItem(KeepField fieldsItem) {
    this.fields.add(fieldsItem);
    return this;
  }

 /**
   * List of fields that are required to be provided
   * @return required
  **/
  public List<String> getRequired() {
    return required;
  }

  /**
    * Set required
  **/
  public void setRequired(List<String> required) {
    this.required = required;
  }

  public KeepFormMode required(List<String> required) {
    this.required = required;
    return this;
  }

  public KeepFormMode addRequiredItem(String requiredItem) {
    this.required.add(requiredItem);
    return this;
  }

 /**
   * read access fields in this mode
   * @return readAccessFields
  **/
  public List<KeepField> getReadAccessFields() {
    return readAccessFields;
  }

  /**
    * Set readAccessFields
  **/
  public void setReadAccessFields(List<KeepField> readAccessFields) {
    this.readAccessFields = readAccessFields;
  }

  public KeepFormMode readAccessFields(List<KeepField> readAccessFields) {
    this.readAccessFields = readAccessFields;
    return this;
  }

  public KeepFormMode addReadAccessFieldsItem(KeepField readAccessFieldsItem) {
    this.readAccessFields.add(readAccessFieldsItem);
    return this;
  }

 /**
   * write access fields in this mode
   * @return writeAccessFields
  **/
  public List<KeepField> getWriteAccessFields() {
    return writeAccessFields;
  }

  /**
    * Set writeAccessFields
  **/
  public void setWriteAccessFields(List<KeepField> writeAccessFields) {
    this.writeAccessFields = writeAccessFields;
  }

  public KeepFormMode writeAccessFields(List<KeepField> writeAccessFields) {
    this.writeAccessFields = writeAccessFields;
    return this;
  }

  public KeepFormMode addWriteAccessFieldsItem(KeepField writeAccessFieldsItem) {
    this.writeAccessFields.add(writeAccessFieldsItem);
    return this;
  }


  /**
    * Create a string representation of this pojo.
  **/
  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class KeepFormMode {\n");
    
    sb.append("    computeWithForm: ").append(toIndentedString(computeWithForm)).append("\n");
    sb.append("    deleteAccessFormula: ").append(toIndentedString(deleteAccessFormula)).append("\n");
    sb.append("    modeName: ").append(toIndentedString(modeName)).append("\n");
    sb.append("    onLoad: ").append(toIndentedString(onLoad)).append("\n");
    sb.append("    onSave: ").append(toIndentedString(onSave)).append("\n");
    sb.append("    readAccessFormula: ").append(toIndentedString(readAccessFormula)).append("\n");
    sb.append("    writeAccessFormula: ").append(toIndentedString(writeAccessFormula)).append("\n");
    sb.append("    validationRules: ").append(toIndentedString(validationRules)).append("\n");
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("    required: ").append(toIndentedString(required)).append("\n");
    sb.append("    readAccessFields: ").append(toIndentedString(readAccessFields)).append("\n");
    sb.append("    writeAccessFields: ").append(toIndentedString(writeAccessFields)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private static String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

