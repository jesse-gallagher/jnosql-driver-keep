/**
 * HCL Project KEEP Core API v1
 * REST APIs for Domino and more done right. With declarative security and access to Code, Design and data
 *
 * The version of the OpenAPI document: 4.3.9
 * Contact: HeyHCL@pnp-hcl.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openntf.xsp.nosql.communication.driver.keep.client.model;

import java.util.List;

import jakarta.json.bind.annotation.JsonbCreator;
import jakarta.json.bind.annotation.JsonbProperty;

/**
  * Definition design information for specific design element Form.
 **/

public class DesignSubFormSimple  {
  
 /**
   * Indicates how to handle form replication conflicts. 
  **/
  @JsonbProperty("@conflictaction")
  private String atConflictaction;

  @JsonbProperty("@hide")
  private String atHide;

 /**
   * The name of the form.
  **/
  @JsonbProperty("@name")
  private String atName;

 /**
   * The note ID of a document, which is uniquely identifies a document within a particular database.
  **/
  @JsonbProperty("@noteid")
  private String atNoteid;

 /**
   * Universal Id of the document, uniquely identifies a document across all replicas of a database
  **/
  @JsonbProperty("@unid")
  private String atUnid;

 /**
   * Alternate names or alias of the form.
  **/
  @JsonbProperty("@alias")
  private String atAlias;

 /**
   * The fields on a subform. 
  **/
  @JsonbProperty("fields")
  private List<DesignFieldSimple> fields = null;

  public DesignSubFormSimple() {
  }

  @JsonbCreator
  public DesignSubFormSimple(
    @JsonbProperty(value = "@conflictaction", nillable = true) String atConflictaction, 
    @JsonbProperty(value = "@hide", nillable = true) String atHide, 
    @JsonbProperty(value = "@name", nillable = true) String atName, 
    @JsonbProperty(value = "@noteid", nillable = true) String atNoteid, 
    @JsonbProperty(value = "@unid", nillable = true) String atUnid, 
    @JsonbProperty(value = "@alias", nillable = true) String atAlias
  ) {
    this.atConflictaction = atConflictaction;
    this.atHide = atHide;
    this.atName = atName;
    this.atNoteid = atNoteid;
    this.atUnid = atUnid;
    this.atAlias = atAlias;
  }
  
 /**
   * Indicates how to handle form replication conflicts. 
   * @return atConflictaction
  **/
  public String getAtConflictaction() {
    return atConflictaction;
  }


 /**
   * Get atHide
   * @return atHide
  **/
  public String getAtHide() {
    return atHide;
  }


 /**
   * The name of the form.
   * @return atName
  **/
  public String getAtName() {
    return atName;
  }


 /**
   * The note ID of a document, which is uniquely identifies a document within a particular database.
   * @return atNoteid
  **/
  public String getAtNoteid() {
    return atNoteid;
  }


 /**
   * Universal Id of the document, uniquely identifies a document across all replicas of a database
   * @return atUnid
  **/
  public String getAtUnid() {
    return atUnid;
  }


 /**
   * Alternate names or alias of the form.
   * @return atAlias
  **/
  public String getAtAlias() {
    return atAlias;
  }


 /**
   * The fields on a subform. 
   * @return fields
  **/
  public List<DesignFieldSimple> getFields() {
    return fields;
  }

  /**
    * Set fields
  **/
  public void setFields(List<DesignFieldSimple> fields) {
    this.fields = fields;
  }

  public DesignSubFormSimple fields(List<DesignFieldSimple> fields) {
    this.fields = fields;
    return this;
  }

  public DesignSubFormSimple addFieldsItem(DesignFieldSimple fieldsItem) {
    this.fields.add(fieldsItem);
    return this;
  }


  /**
    * Create a string representation of this pojo.
  **/
  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DesignSubFormSimple {\n");
    
    sb.append("    atConflictaction: ").append(toIndentedString(atConflictaction)).append("\n");
    sb.append("    atHide: ").append(toIndentedString(atHide)).append("\n");
    sb.append("    atName: ").append(toIndentedString(atName)).append("\n");
    sb.append("    atNoteid: ").append(toIndentedString(atNoteid)).append("\n");
    sb.append("    atUnid: ").append(toIndentedString(atUnid)).append("\n");
    sb.append("    atAlias: ").append(toIndentedString(atAlias)).append("\n");
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private static String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

