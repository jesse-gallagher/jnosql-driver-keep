/**
 * HCL Domino REST API basis
 * REST APIs for Domino and more done right. With declarative security and access to Code, Design and Data
 *
 * The version of the OpenAPI document: 1.0.8
 * Contact: HeyHCL@pnp-hcl.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openntf.xsp.nosql.communication.driver.keep.client.model;

import jakarta.json.bind.annotation.JsonbProperty;

/**
 * Short summary of a rest configuration
 **/

public class RestConfigShort {

  /**
   * How this database is known to the API
   **/
  @JsonbProperty("apiName")
  private String apiName;

  /**
   * The comment assigned to the design element
   **/
  @JsonbProperty("comment")
  private String comment;

  /**
   * The name of the note-specific template this design element is set to derive from
   **/
  @JsonbProperty("template")
  private String template;

  /**
   * When notes database has been configured \"Inherit from the design template\", if \"Prohibit
   * design refresh or replace to modify\" is checked, the design element will not be affected when
   * you replace or refresh the design.
   **/
  @JsonbProperty("prohibitRefresh")
  private Boolean prohibitRefresh;

  /**
   * How this database is known to the API
   * 
   * @return apiName
   **/
  public String getApiName() {
    return apiName;
  }

  /**
   * Set apiName
   **/
  public void setApiName(String apiName) {
    this.apiName = apiName;
  }

  public RestConfigShort apiName(String apiName) {
    this.apiName = apiName;
    return this;
  }

  /**
   * The comment assigned to the design element
   * 
   * @return comment
   **/
  public String getComment() {
    return comment;
  }

  /**
   * Set comment
   **/
  public void setComment(String comment) {
    this.comment = comment;
  }

  public RestConfigShort comment(String comment) {
    this.comment = comment;
    return this;
  }

  /**
   * The name of the note-specific template this design element is set to derive from
   * 
   * @return template
   **/
  public String getTemplate() {
    return template;
  }

  /**
   * Set template
   **/
  public void setTemplate(String template) {
    this.template = template;
  }

  public RestConfigShort template(String template) {
    this.template = template;
    return this;
  }

  /**
   * When notes database has been configured \&quot;Inherit from the design template\&quot;, if
   * \&quot;Prohibit design refresh or replace to modify\&quot; is checked, the design element will
   * not be affected when you replace or refresh the design.
   * 
   * @return prohibitRefresh
   **/
  public Boolean getProhibitRefresh() {
    return prohibitRefresh;
  }

  /**
   * Set prohibitRefresh
   **/
  public void setProhibitRefresh(Boolean prohibitRefresh) {
    this.prohibitRefresh = prohibitRefresh;
  }

  public RestConfigShort prohibitRefresh(Boolean prohibitRefresh) {
    this.prohibitRefresh = prohibitRefresh;
    return this;
  }


  /**
   * Create a string representation of this pojo.
   **/
  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RestConfigShort {\n");

    sb.append("    apiName: ").append(toIndentedString(apiName)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    template: ").append(toIndentedString(template)).append("\n");
    sb.append("    prohibitRefresh: ").append(toIndentedString(prohibitRefresh)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private static String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

