/**
 * HCL Domino REST API basis
 * REST APIs for Domino and more done right. With declarative security and access to Code, Design and Data
 *
 * The version of the OpenAPI document: 1.0.10
 * Contact: HeyHCL@pnp-hcl.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openntf.xsp.nosql.communication.driver.keep.client.model;

import jakarta.json.bind.annotation.JsonbProperty;
import jakarta.validation.constraints.NotNull;

/**
  * Definition of request to quick config a domino database
 **/

public class QuickConfigParam  {
  
 /**
   * Name that is used in ?datSsource= parameter to access configured resource
  **/
  @JsonbProperty("scopeName")
  private String scopeName;

 /**
   * path relative to Domino data directory to nsf database
  **/
  @JsonbProperty("nsfPath")
  private String nsfPath;

 /**
   * name (without .json extension) of schema file in nsf REST file resources. Default value is \"default\"
  **/
  @JsonbProperty("schemaName")
  private String schemaName;

 /**
   * If nsf file not exist, create one empty database or not.
  **/
  @JsonbProperty("create")
  private Boolean create;

 /**
   * Description to the configured scope
  **/
  @JsonbProperty("description")
  private String description;

 /**
   * Base64 of an icon. SVG preferred
  **/
  @JsonbProperty("icon")
  private String icon;

 /**
   * alt text for icon
  **/
  @JsonbProperty("iconName")
  private String iconName;

 /**
   * Name that is used in ?datSsource&#x3D; parameter to access configured resource
   * @return scopeName
  **/
  public String getScopeName() {
    return scopeName;
  }

  /**
    * Set scopeName
  **/
  public void setScopeName(String scopeName) {
    this.scopeName = scopeName;
  }

  public QuickConfigParam scopeName(String scopeName) {
    this.scopeName = scopeName;
    return this;
  }

 /**
   * path relative to Domino data directory to nsf database
   * @return nsfPath
  **/
  @NotNull
  public String getNsfPath() {
    return nsfPath;
  }

  /**
    * Set nsfPath
  **/
  public void setNsfPath(String nsfPath) {
    this.nsfPath = nsfPath;
  }

  public QuickConfigParam nsfPath(String nsfPath) {
    this.nsfPath = nsfPath;
    return this;
  }

 /**
   * name (without .json extension) of schema file in nsf REST file resources. Default value is \&quot;default\&quot;
   * @return schemaName
  **/
  public String getSchemaName() {
    return schemaName;
  }

  /**
    * Set schemaName
  **/
  public void setSchemaName(String schemaName) {
    this.schemaName = schemaName;
  }

  public QuickConfigParam schemaName(String schemaName) {
    this.schemaName = schemaName;
    return this;
  }

 /**
   * If nsf file not exist, create one empty database or not.
   * @return create
  **/
  public Boolean getCreate() {
    return create;
  }

  /**
    * Set create
  **/
  public void setCreate(Boolean create) {
    this.create = create;
  }

  public QuickConfigParam create(Boolean create) {
    this.create = create;
    return this;
  }

 /**
   * Description to the configured scope
   * @return description
  **/
  public String getDescription() {
    return description;
  }

  /**
    * Set description
  **/
  public void setDescription(String description) {
    this.description = description;
  }

  public QuickConfigParam description(String description) {
    this.description = description;
    return this;
  }

 /**
   * Base64 of an icon. SVG preferred
   * @return icon
  **/
  public String getIcon() {
    return icon;
  }

  /**
    * Set icon
  **/
  public void setIcon(String icon) {
    this.icon = icon;
  }

  public QuickConfigParam icon(String icon) {
    this.icon = icon;
    return this;
  }

 /**
   * alt text for icon
   * @return iconName
  **/
  public String getIconName() {
    return iconName;
  }

  /**
    * Set iconName
  **/
  public void setIconName(String iconName) {
    this.iconName = iconName;
  }

  public QuickConfigParam iconName(String iconName) {
    this.iconName = iconName;
    return this;
  }


  /**
    * Create a string representation of this pojo.
  **/
  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QuickConfigParam {\n");
    
    sb.append("    scopeName: ").append(toIndentedString(scopeName)).append("\n");
    sb.append("    nsfPath: ").append(toIndentedString(nsfPath)).append("\n");
    sb.append("    schemaName: ").append(toIndentedString(schemaName)).append("\n");
    sb.append("    create: ").append(toIndentedString(create)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    icon: ").append(toIndentedString(icon)).append("\n");
    sb.append("    iconName: ").append(toIndentedString(iconName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private static String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

