/**
 * HCL Domino REST API basis
 * REST APIs for Domino and more done right. With declarative security and access to Code, Design and Data
 *
 * The version of the OpenAPI document: 1.0.8
 * Contact: HeyHCL@pnp-hcl.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openntf.xsp.nosql.communication.driver.keep.client.model;

import java.lang.reflect.Type;
import jakarta.json.bind.annotation.JsonbProperty;
import jakarta.json.bind.annotation.JsonbTypeDeserializer;
import jakarta.json.bind.annotation.JsonbTypeSerializer;
import jakarta.json.bind.serializer.DeserializationContext;
import jakarta.json.bind.serializer.JsonbDeserializer;
import jakarta.json.bind.serializer.JsonbSerializer;
import jakarta.json.bind.serializer.SerializationContext;
import jakarta.json.stream.JsonGenerator;
import jakarta.json.stream.JsonParser;
import jakarta.validation.constraints.NotNull;

/**
 * Body of a post to /run/formula to test or run a formula If save is set to true, user must be the
 * same as current user Cannot set value for both a document unid and a dql query
 **/

public class FormulaRequest {

  /**
   * User to be tested, can be empty if current user
   **/
  @JsonbProperty("user")
  private String user;

  @JsonbTypeSerializer(TypeEnum.Serializer.class)
  @JsonbTypeDeserializer(TypeEnum.Deserializer.class)
  public enum TypeEnum {

    DOMINO(String.valueOf("domino")), OPENFORMULA(String.valueOf("openformula"));


    String value;

    TypeEnum(String v) {
      value = v;
    }

    public String value() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static final class Deserializer implements JsonbDeserializer<TypeEnum> {
      @Override
      public TypeEnum deserialize(JsonParser parser, DeserializationContext ctx, Type rtType) {
        for (TypeEnum b : TypeEnum.values()) {
          if (String.valueOf(b.value).equals(parser.getString())) {
            return b;
          }
        }
        throw new IllegalArgumentException("Unexpected value '" + parser.getString() + "'");
      }
    }

    public static final class Serializer implements JsonbSerializer<TypeEnum> {
      @Override
      public void serialize(TypeEnum obj, JsonGenerator generator, SerializationContext ctx) {
        generator.write(obj.value);
      }
    }
  }

  /**
   * What type of formula shall be tested: Domino or OpenFormula
   **/
  @JsonbProperty("type")
  private TypeEnum type;

  /**
   * The actual formula
   **/
  @JsonbProperty("formula")
  private String formula;

  /**
   * UniqueId of a document to test against. Can be empty if formula doesn't rely on fields in a
   * document
   **/
  @JsonbProperty("unid")
  private String unid;

  /**
   * Should the document be saved back
   **/
  @JsonbProperty("save")
  private Boolean save;

  /**
   * DQL Query to build a collection to run the formula against (and eventually save it)
   **/
  @JsonbProperty("query")
  private String query;

  /**
   * User to be tested, can be empty if current user
   * 
   * @return user
   **/
  @NotNull
  public String getUser() {
    return user;
  }

  /**
   * Set user
   **/
  public void setUser(String user) {
    this.user = user;
  }

  public FormulaRequest user(String user) {
    this.user = user;
    return this;
  }

  /**
   * What type of formula shall be tested: Domino or OpenFormula
   * 
   * @return type
   **/
  @NotNull
  public TypeEnum getType() {
    return type;
  }

  /**
   * Set type
   **/
  public void setType(TypeEnum type) {
    this.type = type;
  }

  public FormulaRequest type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The actual formula
   * 
   * @return formula
   **/
  @NotNull
  public String getFormula() {
    return formula;
  }

  /**
   * Set formula
   **/
  public void setFormula(String formula) {
    this.formula = formula;
  }

  public FormulaRequest formula(String formula) {
    this.formula = formula;
    return this;
  }

  /**
   * UniqueId of a document to test against. Can be empty if formula doesn&#39;t rely on fields in a
   * document
   * 
   * @return unid
   **/
  public String getUnid() {
    return unid;
  }

  /**
   * Set unid
   **/
  public void setUnid(String unid) {
    this.unid = unid;
  }

  public FormulaRequest unid(String unid) {
    this.unid = unid;
    return this;
  }

  /**
   * Should the document be saved back
   * 
   * @return save
   **/
  @NotNull
  public Boolean getSave() {
    return save;
  }

  /**
   * Set save
   **/
  public void setSave(Boolean save) {
    this.save = save;
  }

  public FormulaRequest save(Boolean save) {
    this.save = save;
    return this;
  }

  /**
   * DQL Query to build a collection to run the formula against (and eventually save it)
   * 
   * @return query
   **/
  public String getQuery() {
    return query;
  }

  /**
   * Set query
   **/
  public void setQuery(String query) {
    this.query = query;
  }

  public FormulaRequest query(String query) {
    this.query = query;
    return this;
  }


  /**
   * Create a string representation of this pojo.
   **/
  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FormulaRequest {\n");

    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    formula: ").append(toIndentedString(formula)).append("\n");
    sb.append("    unid: ").append(toIndentedString(unid)).append("\n");
    sb.append("    save: ").append(toIndentedString(save)).append("\n");
    sb.append("    query: ").append(toIndentedString(query)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private static String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

