/**
 * Copyright Â© 2022-2023 Jesse Gallagher
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * HCL Domino REST API basis
 * REST APIs for Domino and more done right. With declarative security and access to Code, Design and Data
 *
 * The version of the OpenAPI document: 1.0.8
 * Contact: HeyHCL@pnp-hcl.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openntf.xsp.nosql.communication.driver.keep.client.model;

import java.math.BigDecimal;
import jakarta.json.bind.annotation.JsonbProperty;

/**
 * Update documents based on a query, a form mode and a set of fields to be updated
 **/

public class BulkUpdateDocuments {

  /**
   * DQL query string
   **/
  @JsonbProperty("query")
  private String query;

  /**
   * Form mode as configured for any of the forms returned by the query
   **/
  @JsonbProperty("mode")
  private String mode;

  /**
   * Key value pairs, subject to form mode scrutiny
   **/
  @JsonbProperty("replaceItems")
  private Object replaceItems;

  /**
   * Limit the number of documents to be scanned
   **/
  @JsonbProperty("maxScanDocs")
  private Integer maxScanDocs;

  /**
   * Limit the entries (see DQL documentation for it)
   **/
  @JsonbProperty("maxScanEntries")
  private Integer maxScanEntries;

  /**
   * Query timeout in seconds
   **/
  @JsonbProperty("timeoutSecs")
  private Integer timeoutSecs;

  /**
   * Should views get refreshed?
   **/
  @JsonbProperty("viewRefresh")
  private Boolean viewRefresh;

  /**
   * Disable use of views when true
   **/
  @JsonbProperty("noViews")
  private Boolean noViews;

  /**
   * Key/Value to replace ?Variables
   **/
  @JsonbProperty("variables")
  private Object variables;

  /**
   * Default is 0.
   **/
  @JsonbProperty("start")
  private Integer start;

  /**
   * How many to return default is maxInt
   **/
  @JsonbProperty("count")
  private BigDecimal count;

  /**
   * Should contain updated document in the response
   **/
  @JsonbProperty("returnUpdatedDocument")
  private Boolean returnUpdatedDocument;

  /**
   * DQL query string
   * 
   * @return query
   **/
  public String getQuery() {
    return query;
  }

  /**
   * Set query
   **/
  public void setQuery(String query) {
    this.query = query;
  }

  public BulkUpdateDocuments query(String query) {
    this.query = query;
    return this;
  }

  /**
   * Form mode as configured for any of the forms returned by the query
   * 
   * @return mode
   **/
  public String getMode() {
    return mode;
  }

  /**
   * Set mode
   **/
  public void setMode(String mode) {
    this.mode = mode;
  }

  public BulkUpdateDocuments mode(String mode) {
    this.mode = mode;
    return this;
  }

  /**
   * Key value pairs, subject to form mode scrutiny
   * 
   * @return replaceItems
   **/
  public Object getReplaceItems() {
    return replaceItems;
  }

  /**
   * Set replaceItems
   **/
  public void setReplaceItems(Object replaceItems) {
    this.replaceItems = replaceItems;
  }

  public BulkUpdateDocuments replaceItems(Object replaceItems) {
    this.replaceItems = replaceItems;
    return this;
  }

  /**
   * Limit the number of documents to be scanned
   * 
   * @return maxScanDocs
   **/
  public Integer getMaxScanDocs() {
    return maxScanDocs;
  }

  /**
   * Set maxScanDocs
   **/
  public void setMaxScanDocs(Integer maxScanDocs) {
    this.maxScanDocs = maxScanDocs;
  }

  public BulkUpdateDocuments maxScanDocs(Integer maxScanDocs) {
    this.maxScanDocs = maxScanDocs;
    return this;
  }

  /**
   * Limit the entries (see DQL documentation for it)
   * 
   * @return maxScanEntries
   **/
  public Integer getMaxScanEntries() {
    return maxScanEntries;
  }

  /**
   * Set maxScanEntries
   **/
  public void setMaxScanEntries(Integer maxScanEntries) {
    this.maxScanEntries = maxScanEntries;
  }

  public BulkUpdateDocuments maxScanEntries(Integer maxScanEntries) {
    this.maxScanEntries = maxScanEntries;
    return this;
  }

  /**
   * Query timeout in seconds
   * 
   * @return timeoutSecs
   **/
  public Integer getTimeoutSecs() {
    return timeoutSecs;
  }

  /**
   * Set timeoutSecs
   **/
  public void setTimeoutSecs(Integer timeoutSecs) {
    this.timeoutSecs = timeoutSecs;
  }

  public BulkUpdateDocuments timeoutSecs(Integer timeoutSecs) {
    this.timeoutSecs = timeoutSecs;
    return this;
  }

  /**
   * Should views get refreshed?
   * 
   * @return viewRefresh
   **/
  public Boolean getViewRefresh() {
    return viewRefresh;
  }

  /**
   * Set viewRefresh
   **/
  public void setViewRefresh(Boolean viewRefresh) {
    this.viewRefresh = viewRefresh;
  }

  public BulkUpdateDocuments viewRefresh(Boolean viewRefresh) {
    this.viewRefresh = viewRefresh;
    return this;
  }

  /**
   * Disable use of views when true
   * 
   * @return noViews
   **/
  public Boolean getNoViews() {
    return noViews;
  }

  /**
   * Set noViews
   **/
  public void setNoViews(Boolean noViews) {
    this.noViews = noViews;
  }

  public BulkUpdateDocuments noViews(Boolean noViews) {
    this.noViews = noViews;
    return this;
  }

  /**
   * Key/Value to replace ?Variables
   * 
   * @return variables
   **/
  public Object getVariables() {
    return variables;
  }

  /**
   * Set variables
   **/
  public void setVariables(Object variables) {
    this.variables = variables;
  }

  public BulkUpdateDocuments variables(Object variables) {
    this.variables = variables;
    return this;
  }

  /**
   * Default is 0.
   * 
   * @return start
   **/
  public Integer getStart() {
    return start;
  }

  /**
   * Set start
   **/
  public void setStart(Integer start) {
    this.start = start;
  }

  public BulkUpdateDocuments start(Integer start) {
    this.start = start;
    return this;
  }

  /**
   * How many to return default is maxInt
   * 
   * @return count
   **/
  public BigDecimal getCount() {
    return count;
  }

  /**
   * Set count
   **/
  public void setCount(BigDecimal count) {
    this.count = count;
  }

  public BulkUpdateDocuments count(BigDecimal count) {
    this.count = count;
    return this;
  }

  /**
   * Should contain updated document in the response
   * 
   * @return returnUpdatedDocument
   **/
  public Boolean getReturnUpdatedDocument() {
    return returnUpdatedDocument;
  }

  /**
   * Set returnUpdatedDocument
   **/
  public void setReturnUpdatedDocument(Boolean returnUpdatedDocument) {
    this.returnUpdatedDocument = returnUpdatedDocument;
  }

  public BulkUpdateDocuments returnUpdatedDocument(Boolean returnUpdatedDocument) {
    this.returnUpdatedDocument = returnUpdatedDocument;
    return this;
  }


  /**
   * Create a string representation of this pojo.
   **/
  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BulkUpdateDocuments {\n");

    sb.append("    query: ").append(toIndentedString(query)).append("\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("    replaceItems: ").append(toIndentedString(replaceItems)).append("\n");
    sb.append("    maxScanDocs: ").append(toIndentedString(maxScanDocs)).append("\n");
    sb.append("    maxScanEntries: ").append(toIndentedString(maxScanEntries)).append("\n");
    sb.append("    timeoutSecs: ").append(toIndentedString(timeoutSecs)).append("\n");
    sb.append("    viewRefresh: ").append(toIndentedString(viewRefresh)).append("\n");
    sb.append("    noViews: ").append(toIndentedString(noViews)).append("\n");
    sb.append("    variables: ").append(toIndentedString(variables)).append("\n");
    sb.append("    start: ").append(toIndentedString(start)).append("\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    returnUpdatedDocument: ").append(toIndentedString(returnUpdatedDocument))
        .append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private static String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

