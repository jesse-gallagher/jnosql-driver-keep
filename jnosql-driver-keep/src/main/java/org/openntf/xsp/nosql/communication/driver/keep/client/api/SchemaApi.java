/**
 * HCL Project KEEP Core API v1
 * REST APIs for Domino and more done right. With declarative security and access to Code, Design and data
 *
 * The version of the OpenAPI document: 4.3.9
 * Contact: HeyHCL@pnp-hcl.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openntf.xsp.nosql.communication.driver.keep.client.api;

import java.util.List;

import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;
import org.openntf.xsp.nosql.communication.driver.keep.client.model.KeepDatabase;
import org.openntf.xsp.nosql.communication.driver.keep.client.model.RestConfigShort;
import org.openntf.xsp.nosql.communication.driver.keep.client.model.StatusMessage;

import jakarta.validation.Valid;
import jakarta.validation.constraints.NotNull;
import jakarta.ws.rs.Consumes;
import jakarta.ws.rs.DELETE;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.POST;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.ProcessingException;
import jakarta.ws.rs.Produces;
import jakarta.ws.rs.QueryParam;

/**
 * HCL Project KEEP Core API v1
 *
 * <p>REST APIs for Domino and more done right. With declarative security and access to Code, Design and data
 *
 */

@RegisterProvider(ApiExceptionMapper.class)
@Path("")
public interface SchemaApi  {

    /**
     * Create a rest configuration for a database
     *
     */
    @POST
    @Path("/schema")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    public KeepDatabase createUpdateSchema(@QueryParam("nsfPath") @NotNull String nsfPath, @QueryParam("configName") @NotNull String configName, @Valid KeepDatabase keepDatabase, @QueryParam("prohibitRefresh") Boolean prohibitRefresh) throws ApiException, ProcessingException;

    /**
     * Delete a rest configuration from the database
     *
     */
    @DELETE
    @Path("/schema")
    @Produces({ "application/json" })
    public StatusMessage deleteSchema(@QueryParam("nsfPath") @NotNull String nsfPath, @QueryParam("configName") @NotNull String configName) throws ApiException, ProcessingException;

    /**
     * list of all REST configs in a given NSF
     *
     * Used to pick the config to activate
     *
     */
    @GET
    @Path("/schemas")
    @Produces({ "application/json" })
    public List<RestConfigShort> fetchSchemas(@QueryParam("nsfPath") @NotNull String nsfPath) throws ApiException, ProcessingException;

    /**
     * Get a rest configuration from the database
     *
     */
    @GET
    @Path("/schema")
    @Produces({ "application/json" })
    public KeepDatabase getSchema(@QueryParam("nsfPath") @NotNull String nsfPath, @QueryParam("configName") @NotNull String configName) throws ApiException, ProcessingException;
}
