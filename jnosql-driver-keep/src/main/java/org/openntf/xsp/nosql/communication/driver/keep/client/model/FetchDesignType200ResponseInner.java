/**
 * HCL Project KEEP Core API v1
 * REST APIs for Domino and more done right. With declarative security and access to Code, Design and data
 *
 * The version of the OpenAPI document: 4.3.9
 * Contact: HeyHCL@pnp-hcl.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openntf.xsp.nosql.communication.driver.keep.client.model;

import java.util.ArrayList;
import java.util.List;

import jakarta.json.bind.annotation.JsonbCreator;
import jakarta.json.bind.annotation.JsonbProperty;
import jakarta.validation.constraints.NotNull;


public class FetchDesignType200ResponseInner  {
  
 /**
   * Indicates how to handle form replication conflicts. 
  **/
  @JsonbProperty("@conflictaction")
  private String atConflictaction;

  @JsonbProperty("@hide")
  private String atHide;

 /**
   * The name of the agent.
  **/
  @JsonbProperty("@name")
  private String atName;

 /**
   * The note ID of the agent, which is uniquely identifies a document within a particular database.
  **/
  @JsonbProperty("@noteid")
  private String atNoteid;

 /**
   * The Note UNID of the agent.
  **/
  @JsonbProperty("@unid")
  private String atUnid;

 /**
   * Alternate names or alias of the view.
  **/
  @JsonbProperty("@alias")
  private String atAlias;

 /**
   * The fields on a subform. 
  **/
  @JsonbProperty("fields")
  private List<DesignFieldSimple> fields = new ArrayList<>();

 /**
   * 
  **/
  @JsonbProperty("selectionFormula")
  private String selectionFormula;

 /**
   * 
  **/
  @JsonbProperty("columns")
  private List<DesignColumnSimple> columns = new ArrayList<>();

 /**
   * Indicates when this agent runs.
  **/
  @JsonbProperty("@trigger")
  private String atTrigger;

 /**
   * Represents a specified set of target documents that are manipulated by an agent.  The following types run an agent on:  all - All the documents in the database.  allinview - All documents in a view.  modified - All new and modified documents.  runonce - The current document once.  selected - Only the selected documents.  unreadinview - All unread documents in a view.  none
  **/
  @JsonbProperty("@documentset")
  private String atDocumentset;

 /**
   * If this agent has been configured to use in Keep. 
  **/
  @JsonbProperty("@validForKeep")
  private Boolean atValidForKeep;

 /**
   * Indicates the type of the agent (simple action, formula, LotusScript, imported Java, or Java).
  **/
  @JsonbProperty("@type")
  private String atType;

  public FetchDesignType200ResponseInner() {
  }

  @JsonbCreator
  public FetchDesignType200ResponseInner(
    @JsonbProperty(value = "@conflictaction", nillable = true) String atConflictaction, 
    @JsonbProperty(value = "@hide", nillable = true) String atHide, 
    @JsonbProperty(value = "@alias", nillable = true) String atAlias, 
    @JsonbProperty(value = "@trigger", nillable = true) String atTrigger, 
    @JsonbProperty(value = "@validForKeep", nillable = true) Boolean atValidForKeep
  ) {
    this.atConflictaction = atConflictaction;
    this.atHide = atHide;
    this.atAlias = atAlias;
    this.atTrigger = atTrigger;
    this.atValidForKeep = atValidForKeep;
  }
  
 /**
   * Indicates how to handle form replication conflicts. 
   * @return atConflictaction
  **/
  public String getAtConflictaction() {
    return atConflictaction;
  }


 /**
   * Get atHide
   * @return atHide
  **/
  public String getAtHide() {
    return atHide;
  }


 /**
   * The name of the agent.
   * @return atName
  **/
  public String getAtName() {
    return atName;
  }

  /**
    * Set atName
  **/
  public void setAtName(String atName) {
    this.atName = atName;
  }

  public FetchDesignType200ResponseInner atName(String atName) {
    this.atName = atName;
    return this;
  }

 /**
   * The note ID of the agent, which is uniquely identifies a document within a particular database.
   * @return atNoteid
  **/
  public String getAtNoteid() {
    return atNoteid;
  }

  /**
    * Set atNoteid
  **/
  public void setAtNoteid(String atNoteid) {
    this.atNoteid = atNoteid;
  }

  public FetchDesignType200ResponseInner atNoteid(String atNoteid) {
    this.atNoteid = atNoteid;
    return this;
  }

 /**
   * The Note UNID of the agent.
   * @return atUnid
  **/
  public String getAtUnid() {
    return atUnid;
  }

  /**
    * Set atUnid
  **/
  public void setAtUnid(String atUnid) {
    this.atUnid = atUnid;
  }

  public FetchDesignType200ResponseInner atUnid(String atUnid) {
    this.atUnid = atUnid;
    return this;
  }

 /**
   * Alternate names or alias of the view.
   * @return atAlias
  **/
  public String getAtAlias() {
    return atAlias;
  }


 /**
   * The fields on a subform. 
   * @return fields
  **/
  @NotNull
  public List<DesignFieldSimple> getFields() {
    return fields;
  }

  /**
    * Set fields
  **/
  public void setFields(List<DesignFieldSimple> fields) {
    this.fields = fields;
  }

  public FetchDesignType200ResponseInner fields(List<DesignFieldSimple> fields) {
    this.fields = fields;
    return this;
  }

  public FetchDesignType200ResponseInner addFieldsItem(DesignFieldSimple fieldsItem) {
    this.fields.add(fieldsItem);
    return this;
  }

 /**
   * 
   * @return selectionFormula
  **/
  @NotNull
  public String getSelectionFormula() {
    return selectionFormula;
  }

  /**
    * Set selectionFormula
  **/
  public void setSelectionFormula(String selectionFormula) {
    this.selectionFormula = selectionFormula;
  }

  public FetchDesignType200ResponseInner selectionFormula(String selectionFormula) {
    this.selectionFormula = selectionFormula;
    return this;
  }

 /**
   * 
   * @return columns
  **/
  @NotNull
  public List<DesignColumnSimple> getColumns() {
    return columns;
  }

  /**
    * Set columns
  **/
  public void setColumns(List<DesignColumnSimple> columns) {
    this.columns = columns;
  }

  public FetchDesignType200ResponseInner columns(List<DesignColumnSimple> columns) {
    this.columns = columns;
    return this;
  }

  public FetchDesignType200ResponseInner addColumnsItem(DesignColumnSimple columnsItem) {
    this.columns.add(columnsItem);
    return this;
  }

 /**
   * Indicates when this agent runs.
   * @return atTrigger
  **/
  public String getAtTrigger() {
    return atTrigger;
  }


 /**
   * Represents a specified set of target documents that are manipulated by an agent.  The following types run an agent on:  all - All the documents in the database.  allinview - All documents in a view.  modified - All new and modified documents.  runonce - The current document once.  selected - Only the selected documents.  unreadinview - All unread documents in a view.  none
   * @return atDocumentset
  **/
  public String getAtDocumentset() {
    return atDocumentset;
  }

  /**
    * Set atDocumentset
  **/
  public void setAtDocumentset(String atDocumentset) {
    this.atDocumentset = atDocumentset;
  }

  public FetchDesignType200ResponseInner atDocumentset(String atDocumentset) {
    this.atDocumentset = atDocumentset;
    return this;
  }

 /**
   * If this agent has been configured to use in Keep. 
   * @return atValidForKeep
  **/
  public Boolean getAtValidForKeep() {
    return atValidForKeep;
  }


 /**
   * Indicates the type of the agent (simple action, formula, LotusScript, imported Java, or Java).
   * @return atType
  **/
  public String getAtType() {
    return atType;
  }

  /**
    * Set atType
  **/
  public void setAtType(String atType) {
    this.atType = atType;
  }

  public FetchDesignType200ResponseInner atType(String atType) {
    this.atType = atType;
    return this;
  }


  /**
    * Create a string representation of this pojo.
  **/
  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FetchDesignType200ResponseInner {\n");
    
    sb.append("    atConflictaction: ").append(toIndentedString(atConflictaction)).append("\n");
    sb.append("    atHide: ").append(toIndentedString(atHide)).append("\n");
    sb.append("    atName: ").append(toIndentedString(atName)).append("\n");
    sb.append("    atNoteid: ").append(toIndentedString(atNoteid)).append("\n");
    sb.append("    atUnid: ").append(toIndentedString(atUnid)).append("\n");
    sb.append("    atAlias: ").append(toIndentedString(atAlias)).append("\n");
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("    selectionFormula: ").append(toIndentedString(selectionFormula)).append("\n");
    sb.append("    columns: ").append(toIndentedString(columns)).append("\n");
    sb.append("    atTrigger: ").append(toIndentedString(atTrigger)).append("\n");
    sb.append("    atDocumentset: ").append(toIndentedString(atDocumentset)).append("\n");
    sb.append("    atValidForKeep: ").append(toIndentedString(atValidForKeep)).append("\n");
    sb.append("    atType: ").append(toIndentedString(atType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private static String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

