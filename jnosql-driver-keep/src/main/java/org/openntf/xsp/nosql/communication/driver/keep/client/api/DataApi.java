/**
 * HCL Project KEEP Core API v1
 * REST APIs for Domino and more done right. With declarative security and access to Code, Design and data
 *
 * The version of the OpenAPI document: 4.3.9
 * Contact: HeyHCL@pnp-hcl.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openntf.xsp.nosql.communication.driver.keep.client.api;

import java.util.List;
import java.util.Map;

import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;
import org.openntf.xsp.nosql.communication.driver.keep.client.model.AttachmentsUNIDResponseMessage;
import org.openntf.xsp.nosql.communication.driver.keep.client.model.BulkCreateDocuments;
import org.openntf.xsp.nosql.communication.driver.keep.client.model.BulkUnids;
import org.openntf.xsp.nosql.communication.driver.keep.client.model.BulkUpdateDocuments;
import org.openntf.xsp.nosql.communication.driver.keep.client.model.KeepFormMode;
import org.openntf.xsp.nosql.communication.driver.keep.client.model.ListDesignItem;
import org.openntf.xsp.nosql.communication.driver.keep.client.model.QueryRequest;
import org.openntf.xsp.nosql.communication.driver.keep.client.model.RichTextRepresentation;
import org.openntf.xsp.nosql.communication.driver.keep.client.model.StatusMessage;

import jakarta.validation.Valid;
import jakarta.validation.constraints.NotNull;
import jakarta.ws.rs.Consumes;
import jakarta.ws.rs.DELETE;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.PATCH;
import jakarta.ws.rs.POST;
import jakarta.ws.rs.PUT;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.PathParam;
import jakarta.ws.rs.ProcessingException;
import jakarta.ws.rs.Produces;
import jakarta.ws.rs.QueryParam;

/**
 * HCL Project KEEP Core API v1
 *
 * <p>REST APIs for Domino and more done right. With declarative security and access to Code, Design and data
 *
 */

@RegisterProvider(ApiExceptionMapper.class)
@Path("")
public interface DataApi  {

    /**
     * Create multiple documents in a single call
     *
     */
    @POST
    @Path("/bulk/create")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    public List<Object> bulkCreateDocuments(@QueryParam("dataSource") @NotNull String dataSource, @Valid BulkCreateDocuments bulkCreateDocuments) throws ApiException, ProcessingException;

    /**
     * Delete multiple documents in a single call
     *
     */
    @POST
    @Path("/bulk/delete")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    public List<Object> bulkDeleteDocuments(@QueryParam("dataSource") @NotNull String dataSource, @Valid BulkUnids bulkUnids) throws ApiException, ProcessingException;

    /**
     * Retrieve multiple documents in a single call by unid
     *
     */
    @POST
    @Path("/bulk/unid")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    public List<Object> bulkGetDocumentsByUnid(@QueryParam("dataSource") @NotNull String dataSource, @Valid BulkUnids bulkUnids, @QueryParam("richTextAs") RichTextRepresentation richTextAs) throws ApiException, ProcessingException;

    /**
     * Update multiple documents in a single call
     *
     */
    @PATCH
    @Path("/bulk/update")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    public List<Object> bulkUpdateDocumentsByQuery(@QueryParam("dataSource") @NotNull String dataSource, @Valid BulkUpdateDocuments bulkUpdateDocuments) throws ApiException, ProcessingException;

    /**
     * Create a new document for a specified form.
     *
     */
    @POST
    @Path("/document")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    public Map<String, Object> createDocument(@QueryParam("dataSource") @NotNull String dataSource, @Valid Map<String, Object> requestBody, @QueryParam("parentUnid") String parentUnid) throws ApiException, ProcessingException;

    /**
     * Creates a new attachment in an existing document
     *
     * The filename passed will be used, if unique. Otherwise a unique name will be evaluated from the passed filename.
     *
     */
    @POST
    @Path("/attachments/{unid}")
    @Consumes({ "multipart/form-data" })
    @Produces({ "application/json" })
    public AttachmentsUNIDResponseMessage createDocumentAttachment(@QueryParam("dataSource") @NotNull String dataSource, @PathParam("unid") String unid, @QueryParam("fieldName") String fieldName) throws ApiException, ProcessingException;

    /**
     * Delete the given document
     *
     */
    @DELETE
    @Path("/document/{unid}")
    @Produces({ "application/json" })
    public StatusMessage deleteDocument(@QueryParam("dataSource") @NotNull String dataSource, @PathParam("unid") String unid, @QueryParam("mode") String mode, @QueryParam("richTextAs") RichTextRepresentation richTextAs) throws ApiException, ProcessingException;

    /**
     * Removes an attachment
     *
     */
    @DELETE
    @Path("/attachments/{unid}/{attachmentName}")
    @Produces({ "application/json" })
    public StatusMessage deleteDocumentAttachment(@QueryParam("dataSource") @NotNull String dataSource, @PathParam("attachmentName") String attachmentName, @PathParam("unid") String unid, @QueryParam("fieldName") String fieldName) throws ApiException, ProcessingException;

    /**
     * Pulls in view data
     *
     */
    @GET
    @Path("/lists/{name}")
    @Produces({ "application/json" })
    public List<Object> fetchViewEntries(@PathParam("name") String name, @QueryParam("dataSource") @NotNull String dataSource, @QueryParam("count") Integer count, @QueryParam("scope") String scope, @QueryParam("start") Integer start, @QueryParam("key") String key, @QueryParam("documents") Boolean documents, @QueryParam("column") String column, @QueryParam("direction") String direction, @QueryParam("startsWith") String startsWith, @QueryParam("mode") String mode) throws ApiException, ProcessingException;

    /**
     * Provide information on available views/folders
     *
     * Uses db.getViews() and filters out excluded views
     *
     */
    @GET
    @Path("/lists")
    @Produces({ "application/json" })
    public List<ListDesignItem> fetchViews(@QueryParam("dataSource") @NotNull String dataSource, @QueryParam("type") String type) throws ApiException, ProcessingException;

    /**
     * Retrieve a given document at its appropriate mode
     *
     */
    @GET
    @Path("/document/{unid}")
    @Produces({ "application/json" })
    public Map<String, Object> getDocument(@PathParam("unid") String unid, @QueryParam("dataSource") @NotNull String dataSource, @QueryParam("mode") String mode, @QueryParam("richTextAs") RichTextRepresentation richTextAs, @QueryParam("computeWithForm") Boolean computeWithForm) throws ApiException, ProcessingException;

    /**
     * Retrieve a document&#39;s attachment
     *
     */
    @GET
    @Path("/attachments/{unid}/{attachmentName}")
    @Produces({ "application/json" })
    public void getDocumentAttachment(@QueryParam("dataSource") @NotNull String dataSource, @PathParam("attachmentName") String attachmentName, @PathParam("unid") String unid) throws ApiException, ProcessingException;

    /**
     * Returns the modes available and fields that can be edited
     *
     */
    @GET
    @Path("/documentmodes/{unid}")
    @Produces({ "application/json" })
    public List<KeepFormMode> getDocumentFormModes(@QueryParam("dataSource") @NotNull String dataSource, @PathParam("unid") String unid) throws ApiException, ProcessingException;

    /**
     * Get KeepDatabase-specific OpenAPI spec
     *
     */
    @GET
    @Path("/openapi")
    @Produces({ "application/json" })
    public Object getOpenAPI(@QueryParam("dataSource") @NotNull String dataSource, @QueryParam("voltmx") Boolean voltmx) throws ApiException, ProcessingException;

    /**
     * Return RichText as Markdown
     *
     */
    @GET
    @Path("/richtext/markdown/{unid}")
    @Produces({ "text/markdown", "application/json" })
    public String getRichTextMarkdown(@QueryParam("dataSource") @NotNull String dataSource, @PathParam("unid") String unid, @QueryParam("mode") String mode, @QueryParam("item") String item) throws ApiException, ProcessingException;

    /**
     * Return RichText as MIME
     *
     */
    @GET
    @Path("/richtext/mime/{unid}")
    @Produces({ "application/mime", "application/json" })
    public String getRichTextMime(@QueryParam("dataSource") @NotNull String dataSource, @PathParam("unid") String unid, @QueryParam("mode") String mode, @QueryParam("item") String item) throws ApiException, ProcessingException;

    /**
     * Processes view data as pivot
     *
     * Computes min, max, count, total of retrieved view entries
     *
     */
    @GET
    @Path("/listspivot/{name}")
    @Produces({ "application/json" })
    public Object pivotViewEntries(@PathParam("name") String name, @QueryParam("pivotColumn") @NotNull String pivotColumn, @QueryParam("dataSource") @NotNull String dataSource, @QueryParam("count") Integer count, @QueryParam("scope") String scope, @QueryParam("start") Integer start, @QueryParam("key") String key, @QueryParam("column") String column, @QueryParam("direction") String direction, @QueryParam("startsWith") String startsWith, @QueryParam("mode") String mode) throws ApiException, ProcessingException;

    /**
     * Send a DQL query and get JSON documents back
     *
     */
    @POST
    @Path("/query")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    public List<Map<String, Object>> query(@QueryParam("dataSource") @NotNull String dataSource, @QueryParam("action") @NotNull String action, @Valid QueryRequest queryRequest, @QueryParam("richTextAs") RichTextRepresentation richTextAs, @QueryParam("count") Integer count, @QueryParam("start") Integer start) throws ApiException, ProcessingException;

    /**
     * Perform an update on the document at the relevant mode
     *
     */
    @PUT
    @Path("/document/{unid}")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    public Map<String, Object> updateDocument(@QueryParam("dataSource") @NotNull String dataSource, @PathParam("unid") String unid, @Valid Map<String, Object> requestBody, @QueryParam("mode") String mode, @QueryParam("richTextAs") RichTextRepresentation richTextAs, @QueryParam("parentUnid") String parentUnid, @QueryParam("revision") String revision) throws ApiException, ProcessingException;
}
