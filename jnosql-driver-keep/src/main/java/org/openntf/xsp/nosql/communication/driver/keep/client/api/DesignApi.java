/**
 * HCL Project KEEP Core API v1
 * REST APIs for Domino and more done right. With declarative security and access to Code, Design and data
 *
 * The version of the OpenAPI document: 4.3.9
 * Contact: HeyHCL@pnp-hcl.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openntf.xsp.nosql.communication.driver.keep.client.api;

import java.util.List;

import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;
import org.openntf.xsp.nosql.communication.driver.keep.client.model.DesignNSFSimple;
import org.openntf.xsp.nosql.communication.driver.keep.client.model.FetchDesignType200ResponseInner;
import org.openntf.xsp.nosql.communication.driver.keep.client.model.StatusMessage;
import org.openntf.xsp.nosql.communication.driver.keep.client.model.UpdateCreateDesignRequest;

import jakarta.validation.Valid;
import jakarta.validation.constraints.NotNull;
import jakarta.ws.rs.Consumes;
import jakarta.ws.rs.DELETE;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.POST;
import jakarta.ws.rs.PUT;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.PathParam;
import jakarta.ws.rs.ProcessingException;
import jakarta.ws.rs.Produces;
import jakarta.ws.rs.QueryParam;

/**
 * HCL Project KEEP Core API v1
 *
 * <p>REST APIs for Domino and more done right. With declarative security and access to Code, Design and data
 *
 */

@RegisterProvider(ApiExceptionMapper.class)
@Path("")
public interface DesignApi  {

    /**
     * Create a database, based on a template if required
     *
     * Create a database, based on the nsfPath and title in the request body, if required you can also configure the template in request body. 
     *
     */
    @POST
    @Path("/design/nsf")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    public DesignNSFSimple createNSF(@QueryParam("dataSource") @NotNull String dataSource, @Valid DesignNSFSimple designNSFSimple) throws ApiException, ProcessingException;

    /**
     * remove DXL from cache
     *
     * Does not touch anything inside a database, only removes the cache
     *
     */
    @DELETE
    @Path("/dxl")
    @Produces({ "application/json" })
    public StatusMessage deleteDxl(@QueryParam("dataSource") @NotNull String dataSource) throws ApiException, ProcessingException;

    /**
     * Return list of design elements for a database
     *
     * List design information in JSON format for all types of design elements in JSON format.
     *
     */
    @GET
    @Path("/design")
    @Produces({ "application/json" })
    public Object fetchDesignAll(@QueryParam("dataSource") String dataSource, @QueryParam("raw") Boolean raw, @QueryParam("nsfPath") String nsfPath) throws ApiException, ProcessingException;

    /**
     * Retrieve list of design elements for a database for a specific type
     *
     * List design information in JSON format for a subset of design elements in JSON format.
     *
     */
    @GET
    @Path("/design/{designType}")
    @Produces({ "application/json" })
    public List<FetchDesignType200ResponseInner> fetchDesignType(@PathParam("designType") String designType, @QueryParam("dataSource") @NotNull String dataSource, @QueryParam("nsfPath") String nsfPath, @QueryParam("raw") Boolean raw) throws ApiException, ProcessingException;

    /**
     * Retrieve individual design element for a database
     *
     * Retrieve design information in JSON format for a specific design element in JSON format.
     *
     */
    @GET
    @Path("/design/{designType}/{designName}")
    @Produces({ "application/json" })
    public FetchDesignType200ResponseInner getDesign(@PathParam("designName") String designName, @QueryParam("dataSource") @NotNull String dataSource, @PathParam("designType") String designType, @QueryParam("raw") Boolean raw, @QueryParam("nsfPath") String nsfPath) throws ApiException, ProcessingException;

    /**
     * Get all DXL
     *
     * Raw DXL of a given database
     *
     */
    @GET
    @Path("/dxl")
    @Produces({ "text/xml", "application/json" })
    public String getDxl(@QueryParam("dataSource") @NotNull String dataSource) throws ApiException, ProcessingException;

    /**
     * Updates a view, form, agent or library
     *
     * Updates or creates Domino design elements based on simplified JSON
     *
     */
    @PUT
    @Path("/design/{designType}/{designName}")
    @Consumes({ "application/json" })
    @Produces({ "application/json" })
    public StatusMessage updateCreateDesign(@PathParam("designName") String designName, @QueryParam("dataSource") @NotNull String dataSource, @PathParam("designType") String designType, @Valid UpdateCreateDesignRequest updateCreateDesignRequest, @QueryParam("raw") Boolean raw, @QueryParam("nsfPath") String nsfPath) throws ApiException, ProcessingException;

    /**
     * Update database with DXL
     *
     * Upload DXL to alter design elements
     *
     */
    @PUT
    @Path("/dxl")
    @Consumes({ "text/xml" })
    @Produces({ "application/json" })
    public Object updateDxl(@QueryParam("dataSource") @NotNull String dataSource, @Valid String body) throws ApiException, ProcessingException;
}
