/**
 * Copyright Â© 2022-2023 Jesse Gallagher
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * HCL Domino REST API basis
 * REST APIs for Domino and more done right. With declarative security and access to Code, Design and Data
 *
 * The version of the OpenAPI document: 1.0.8
 * Contact: HeyHCL@pnp-hcl.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openntf.xsp.nosql.communication.driver.keep.client.model;

import java.util.List;
import jakarta.json.bind.annotation.JsonbProperty;

/**
  * 
 **/

public class ViewInfo {

  /**
   * Name of the view, matches design
   **/
  @JsonbProperty("name")
  private String name;

  /**
   * Collection of alternate names, might match aliases of the Domino design
   **/
  @JsonbProperty("alias")
  private List<String> alias = null;

  /**
   * Primary key to find the view
   **/
  @JsonbProperty("unid")
  private String unid;

  /**
   * Name of the view, matches design
   * 
   * @return name
   **/
  public String getName() {
    return name;
  }

  /**
   * Set name
   **/
  public void setName(String name) {
    this.name = name;
  }

  public ViewInfo name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Collection of alternate names, might match aliases of the Domino design
   * 
   * @return alias
   **/
  public List<String> getAlias() {
    return alias;
  }

  /**
   * Set alias
   **/
  public void setAlias(List<String> alias) {
    this.alias = alias;
  }

  public ViewInfo alias(List<String> alias) {
    this.alias = alias;
    return this;
  }

  public ViewInfo addAliasItem(String aliasItem) {
    this.alias.add(aliasItem);
    return this;
  }

  /**
   * Primary key to find the view
   * 
   * @return unid
   **/
  public String getUnid() {
    return unid;
  }

  /**
   * Set unid
   **/
  public void setUnid(String unid) {
    this.unid = unid;
  }

  public ViewInfo unid(String unid) {
    this.unid = unid;
    return this;
  }


  /**
   * Create a string representation of this pojo.
   **/
  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ViewInfo {\n");

    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    alias: ").append(toIndentedString(alias)).append("\n");
    sb.append("    unid: ").append(toIndentedString(unid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private static String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

